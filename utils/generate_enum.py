import os
import glob
import pprint
import argparse


_registry = {'parser': {}, 'generator': {}}


def registered_classes(typename, return_classes=False):
    global _registry
    if return_classes:
        return [v for k, v in _registry[typename].items() if k is not None]
    return [k for k in _registry[typename].keys() if k is not None]


def get_registered_class(typename, name):
    global _registry
    return _registry[typename][name]


class EnumMeta(type):

    def __new__(meta, name, bases, class_dict):
        cls = type.__new__(meta, name, bases, class_dict)
        global _registry
        if cls._type is not None and cls.name is not None:
            if cls.name in _registry[cls._type]:
                raise AssertionError(f"{cls._type} \'{cls.name}\' "
                                     f"already registered")
            _registry[cls._type][cls.name] = cls
        cls.create_child_classes(cls)
        return cls


class EnumBase(metaclass=EnumMeta):

    _type = None
    name = None
    prefixes = {}
    suffixes = {}
    lowers = {}
    replacements = {}

    def __init__(self, src, kwargs):
        self.src = src
        self._current_keys = {}
        for k in ['prefixes', 'suffixes', 'lowers', 'replacements']:
            if k in kwargs:
                setattr(self, k, kwargs.pop(k))

    @staticmethod
    def create_child_classes(cls):
        pass

    @property
    def current_key(self):
        return self._current_keys.get('k', None)

    def reset_current_keys(self):
        self._current_keys = {}

    def add_enum(self, k):
        self._current_keys = {
            'k': k,
            'kprefix': self.prefixes.get(k, []),
            'ksuffix': self.suffixes.get(k, []),
            'klower': self.lowers.get(k, False),
            'kreplacement': self.replacements.get(k, {}),
            'lastidx': -1,
        }

    def add_member(self, member):
        raise NotImplementedError

    def add_prefix(self, k, v):
        self.prefixes = dict(self.prefixes)
        self.prefixes.setdefault(k, [])
        if v not in self.prefixes[k]:
            self.prefixes[k].append(v)


class EnumParserBase(EnumBase):

    _type = 'parser'
    file_extension = None
    comment = None

    def __init__(self, src, is_regex=False, verbose=False, **kwargs):
        if is_regex:
            src = glob.glob(src)
            assert src
        else:
            src = [src]
        self.param = {}
        super(EnumParserBase, self).__init__(src, kwargs)
        for isrc in sorted(self.src):
            self.parse(isrc, **kwargs)
        if verbose:
            pprint.pprint(self.param)

    def add_enum(self, k):
        super(EnumParserBase, self).add_enum(k)
        self.param.setdefault(k, [])

    def add_member(self, member):
        assert self.current_key is not None
        if 'idx' in member:
            member.setdefault('explicit_idx', True)
        member.setdefault('idx', str(self._current_keys['lastidx']))
        member.setdefault('doc', '')
        member.setdefault('abbr', member['name'])
        for x in self._current_keys['kprefix']:
            member['abbr'] = member['abbr'].split(x)[-1]
        for x in self._current_keys['ksuffix']:
            member['abbr'] = member['abbr'].split(x)[0]
        if self._current_keys['klower']:
            member['abbr'] = member['abbr'].lower()
        member['abbr'] = self._current_keys['kreplacement'].get(
            member['abbr'], member['abbr'])
        if member['name']:
            self.param[self.current_key].append(member)
            self._current_keys['lastidx'] = int(member['idx'])

    def parse(self, src, **kwargs):
        with open(src, 'r') as fd:
            lines = fd.readlines()
        self.parse_lines(lines, **kwargs)

    def parse_lines(self, lines, **kwargs):
        raise NotImplementedError

    def prefix_by_split(self, split):
        out = {}
        for k, v in self.param.items():
            prefix = k.split(split, 1)[0]
            out[k] = [prefix]
        return out


class EnumGeneratorBase(EnumBase):

    _type = 'generator'
    prefix = []
    suffix = []
    file_prefix = ''
    file_suffix = ''
    file_extension = None
    skip = []
    skip_items = {}
    added_file_classes = {}
    added_section_classes = {}
    explicit_dst = False
    perfile_options = {
        'dst': {
            'type': str,
            'help': "Location where generated file should be written"
        },
        'append': {
            'type': str,
            'choices': ['nothing', 'direct', 'preserved', 'unique'],
            'help': "How data should be appended to the file",
        },
    }
    disclaimer = [
        "This code is generated by generate_enum.py and should not be",
        "modified directly"
    ]
    preserve_marker = [
        "Code after this line will be preserved"
    ]

    def __init__(self, src, dst=None, directory=None, added_files=None,
                 parent=None, child_kws={}, skip_children=False,
                 dont_generate=False, added_sections=None, **kwargs):
        for k in self.perfile_options_keys():
            assert f'{k}_{self.name}' not in kwargs
            setattr(self, k, kwargs.pop(k, None))
        if dst is None:
            if self.explicit_dst:
                raise ValueError(f"Destination must be provided for "
                                 f"\'{self.name}\' {self._type}")
            assert self.file_suffix or self.file_extension
            src_parts = os.path.split(src.src[0])
            dst = directory if directory else src_parts[0]
            if self.file_prefix:
                dst = os.path.join(dst, self.file_prefix + src_parts[1])
            else:
                dst = os.path.join(dst, src_parts[1])
            if self.file_suffix:
                dst = self.file_suffix.join(os.path.splitext(dst))
            if self.file_extension:
                dst = os.path.splitext(dst)[0] + self.file_extension
        self.basename = os.path.basename(os.path.splitext(dst)[0])[-1]
        self.dst = dst
        self.parent = parent
        self.lines = []
        if added_files is None:
            added_files = {}
        self.added_files = added_files
        if added_sections is None:
            added_sections = {}
        self.added_sections = added_sections
        child_kws = self.extract_child_kws(kwargs, child_kws,
                                           directory=directory,
                                           dont_generate=True)
        super(EnumGeneratorBase, self).__init__(src, kwargs)
        if not skip_children:
            for k, v in self.added_file_classes.items():
                kws = child_kws[v.name]
                if k == 'header' and 'dst' not in kws:
                    kws['dst'] = self.dst.replace(
                        self.file_extension, v.file_extension)
                if k not in self.added_files:
                    self.added_files[k] = v(src, child_kws=child_kws,
                                            parent=self, **kws)
            for k, v in self.added_section_classes.items():
                kws = child_kws[v.name]
                if k not in self.added_sections:
                    self.added_sections[k] = v(src, child_kws=child_kws,
                                               parent=self, **kws)
        self.lines = []
        self.write_kwargs = dict(kwargs, append=self.append)
        if not dont_generate:
            self.do_write()

    @classmethod
    def add_arguments(cls, parser):
        for k, v in cls.perfile_options.items():
            key = f"{k}_{cls.name}"
            dest = v.get('dest', '')
            help_msg = v.get('help', '')
            if help_msg:
                v = dict(v, help=f"{cls.name}: {help_msg}")
            if dest:
                v = dict(v, dest=f"{dest}_{cls.name}")
            parser.add_argument(
                f"--{key.replace('_', '-')}", **v)

    @classmethod
    def get_arguments(cls, args, kwargs):
        for k, v in cls.perfile_options.items():
            if v.get('dest', ''):
                k = v['dest']
            key = f"{k}_{cls.name}"
            val = getattr(args, key, None)
            if val:
                kwargs[key] = val

    @classmethod
    def perfile_options_keys(cls):
        return ['kwargs'] + [
            v.get('dest', k) for k, v in cls.perfile_options.items()]

    @classmethod
    def all_children(cls, return_classes=False):
        if return_classes:
            out = (
                list(cls.added_file_classes.values())
                + list(cls.added_section_classes.values())
            )
        else:
            out = (
                [v.name for v in cls.added_file_classes.values()]
                + [v.name for v in cls.added_section_classes.values()]
            )
        for v in cls.added_file_classes.values():
            out += v.all_children(return_classes=return_classes)
        for v in cls.added_section_classes.values():
            out += v.all_children(return_classes=return_classes)
        return out

    @classmethod
    def extract_child_kws(cls, kwargs, child_kws, **kws_all):
        kwargs_orig = dict(kwargs)
        out = child_kws
        kws_all.update(**child_kws.pop('all', {}))
        for xcls in cls.all_children(return_classes=True):
            x = xcls.name
            out.setdefault(x, {})
            for k in xcls.perfile_options_keys():
                key = f"{k}_{x}"
                if key in kwargs:
                    if k == 'kwargs':
                        out[x].update(**kwargs.pop(key))
                    else:
                        out[x][k] = kwargs.pop(key)
                elif key in kwargs_orig:
                    if k == 'kwargs':
                        out[x].update(**kwargs_orig[key])
                    else:
                        out[x][k] = kwargs_orig[key]
        kws_all = dict(kwargs, **kws_all)
        for x in cls.all_children():
            out[x] = dict(kws_all, **out[x])
        return out

    @property
    def existing_lines(self):
        if os.path.isfile(self.dst):
            with open(self.dst, 'r') as fd:
                return fd.read().splitlines()
        return []

    def get_child(self, k):
        if k in self.added_sections:
            return self.added_sections[k]
        return self.added_files[k]

    def do_generate(self):
        for v in self.added_sections.values():
            v.do_generate()
        for v in self.added_files.values():
            v.do_generate()
        self.lines = self.generate()

    def do_write(self):
        for v in self.added_sections.values():
            v.do_generate()
        for v in self.added_files.values():
            v.do_write()
        return self.write(**self.write_kwargs)

    def write(self, verbose=False, overwrite=False, dry_run=False,
              append=False):
        self.lines = self.generate()
        # if not self.lines:
        #     print(f"No lines to be written to {self.dst}")
        #     return
        lines = [
            self.comment + ' ' + x for x in self.disclaimer
        ] + self.prefix + self.lines + self.suffix
        if append == 'nothing':
            append = False
        if append and os.path.isfile(self.dst):
            existing = self.existing_lines
            if append in [True, 'direct', 'True']:
                lines = existing + lines
            elif append == 'unique':
                for x in lines:
                    if x not in existing:
                        existing.append(x)
                lines = existing
            elif append == 'preserved':
                marker = self.comment + ' ' + self.preserve_marker[0]
                marker_len = len(self.preserve_marker)
                idx_old = existing.index(marker)
                idx_new = lines.index(marker)
                if idx_old != -1:
                    if idx_new != -1:
                        lines = (
                            lines[:(idx_new + marker_len)]
                            + existing[(idx_old + marker_len):]
                            + lines[(idx_new + marker_len):])
                    else:
                        lines += existing[(idx_old + marker_len):]
            else:
                raise NotImplementedError(
                    f"Invalid append value: \'{append}\'")
        contents = '\n'.join(lines) + '\n'
        if verbose:
            print(f"{self.dst}\n----------------\n{contents}")
        if dry_run:
            return
        if (not overwrite) and os.path.isfile(self.dst):
            raise AssertionError(f"{self.name} file {self.dst} "
                                 f"already exists")
        with open(self.dst, 'w') as fd:
            fd.write(contents)

    def max_width(self, members, key='name', func=None):
        if len(members) == 0:
            return 0
        if func is not None:
            width = len(func(max(members, key=lambda x: len(func(x)))))
        elif key == 'name':
            width = len(self.add_member(
                max(members, key=lambda x:
                    len(self.add_member(x, return_name=True))),
                return_name=True))
        else:
            width = len(max(members, key=lambda x:
                            len(x.get(key, ''))).get(key, ''))
        if key == 'idx':
            width += 3
        return width

    def add_member(self, member, return_name=False):
        assert self.current_key is not None
        name = member['name']
        abbr = member.get('abbr', name)
        name = self._current_keys['kreplacement'].get(
            name, name)
        if self._current_keys['klower']:
            name = name.lower()
        if not member.get('no_suffix', False):
            for x in self._current_keys['ksuffix']:
                name = name + x
        if not member.get('no_prefix', False):
            for x in self._current_keys['kprefix']:
                name = x + name
        if return_name:
            return name
        return dict(member, name=name, abbr=abbr)

    def generate_member(self, x, **kwargs):
        raise NotImplementedError

    def generate_enum(self, name, members, prefix_with_type=False,
                      **kwargs):
        lines = []
        if prefix_with_type:
            self.add_prefix(name, name + '_')
        self.add_enum(name)
        lines += self.generate_item(name, members, **kwargs)
        return lines

    def generate_item(self, name, members, **kwargs):
        lines = []
        for x in members:
            if x['name'] in self.skip_items.get(name, []):
                continue
            x = self.add_member(x)
            lines += self.generate_member(x, **kwargs)
        return lines

    def generate(self, indent='', **kwargs):
        lines = []
        for k, v in self.src.param.items():
            if k in self.skip:
                continue
            self.add_enum(k)
            lines += [indent + x for x in
                      self.generate_item(k, v, **kwargs)]
        return lines


class CMixin:

    comment = "//"
    perfile_options = dict(
        EnumGeneratorBase.perfile_options,
        include_file={
            'action': 'append',
            'dest': 'include_files',
            'help': "File that should be included.",
        },
        namespace={
            'action': 'append',
            'dest': 'namespaces',
            'help': "C++ namespaces that should contain the classes",
        },
    )

    def __init__(self, *args, **kwargs):
        self.root_include_dir = kwargs.pop('root_include_dir', None)
        self.namespaces = kwargs.pop('namespaces', None)
        if ((self._type == 'generator'
             and (self.namespaces or self.root_include_dir))):
            kwargs.setdefault('child_kws', {})
            kwargs['child_kws'].setdefault('all', {})
            kwargs['child_kws']['all'].setdefault(
                'root_include_dir', self.root_include_dir)
            kwargs['child_kws']['all']['namespaces'] = self.namespaces
        super().__init__(*args, **kwargs)

    @classmethod
    def include_file(cls, x, caller=None, rootdir=None):
        if isinstance(x, EnumGeneratorBase):
            x = x.dst
        elif isinstance(x, EnumParserBase):
            x = x.src
        if rootdir is None and caller is not None:
            rootdir = os.path.commonprefix([x, caller])
        if rootdir is None:
            header_incl = os.path.basename(x)
        else:
            header_incl = os.path.relpath(x, rootdir)
        return [f"#include \"{header_incl}\"", ""]

    @classmethod
    def specialization(cls, lines, spec_param=[], specialize=[]):
        specialization = ''
        if spec_param:
            if specialize:
                lines += ['template<>']
                specialization = f"<{', '.join(specialize)}>"
            elif len(spec_param) == 1:
                lines += [f"template<{spec_param[0]} T>"]
            else:
                param = [f"{x} T{i}" for i, x in enumerate(spec_param)]
                lines += [f"template<{', '.join(param)}>"]
        return specialization

    def add_include_files(self):
        lines = []
        if self.include_files:
            for x in self.include_files:
                lines += self.include_file(x, caller=self.dst,
                                           rootdir=self.root_include_dir)
            lines += ['']
        return lines

    def include_self(self, caller, rootdir=None):
        if rootdir is None:
            rootdir = self.root_include_dir
        return self.include_file(
            self.dst, caller=caller, rootdir=rootdir)

    def include_header(self, caller=None):
        if caller is None:
            caller = self.dst
        return self.include_file(
            self.get_child('header').dst, caller=caller,
            rootdir=self.root_include_dir)

    def generate(self, indent='', **kwargs):
        lines = []
        lines += self.add_include_files()
        if self.namespaces:
            if self.file_extension in ['.hpp', '.h']:
                for x in self.namespaces:
                    lines += [f"{indent}namespace {x} {{"]
                    indent += 2 * ' '
            else:
                lines += [
                    f"using namespace {'::'.join(self.namespaces)};", ""]
        lines += super().generate(indent=indent, **kwargs)
        if self.namespaces and self.file_extension in ['.hpp', '.h']:
            for x in self.namespaces:
                indent = indent[:(len(indent) - 2)]
                lines += [f"{indent}}}"]
        return lines


class ParamFileParser(EnumParserBase):

    name = 'param'
    comment = '#'
    file_extension = '.txt'

    def parse(self, src, **kwargs):
        k = os.path.basename(os.path.splitext(src)[0])
        self.add_enum(k)
        out = super(ParamFileParser, self).parse(src, **kwargs)
        self.reset_current_keys()
        return out

    def parse_lines(self, lines):
        for line in lines:
            assert '//' not in line
            rem = line.split(self.comment, 1)
            if (not rem[0]) or rem[0].isspace():
                continue
            member = {}
            if len(rem) == 2:
                member['doc'] = rem[1].strip()
            rem = rem[0].split()
            member['name'] = rem[0].strip()
            member['val'] = rem[1].strip()
            self.add_member(member)


class CEnumParser(EnumParserBase):

    name = 'c'
    file_extension = '.cpp'

    def parse_lines(self, lines):
        i = 0
        while i < len(lines):
            if self.current_key is not None:
                if '}' in lines[i]:
                    self.reset_current_keys()
                else:
                    member = {}
                    rem = lines[i].split('//', 1)
                    if len(rem) == 2:
                        member['doc'] = rem[1].strip().rstrip('!<')
                    rem = rem[0].split(',')[0]
                    rem = rem.split("=", 1)
                    if len(rem) == 2:
                        member['idx'] = eval(rem[1].strip().rstrip('LL'))
                    member['name'] = rem[0].strip()
                    self.add_member(member)
            elif lines[i].strip().startswith('enum'):
                k = lines[i].split('enum', 1)[1].split()[0].strip()
                self.add_enum(k)
                while '{' not in lines[i]:
                    i += 1
            i += 1


class CEnumGeneratorBase(CMixin, EnumGeneratorBase):

    file_suffix = '_enum'
    file_extension = '.hpp'
    prefix = [
        '#pragma once',
        '',
    ]


class CEnumGeneratorBaseHeader(CEnumGeneratorBase):

    def add_enum(self, *args, **kwargs):
        super(CEnumGeneratorBaseHeader, self).add_enum(*args, **kwargs)
        self.parent.add_enum(*args, **kwargs)

    def generate_item(self, name, members):
        assert self.parent
        return self.parent.generate_header_item(name, members)


class CEnumGeneratorBaseSource(CMixin, EnumGeneratorBase):

    file_extension = '.cpp'
    header_attr = {}
    perfile_options = dict(
        CMixin.perfile_options,
        define_in_header={
            'action': 'store_true', 'default': True,
            'help': "Write the definition in the header.",
        },
        **EnumGeneratorBase.perfile_options,
    )

    @staticmethod
    def create_child_classes(cls):
        EnumGeneratorBase.create_child_classes(cls)
        if cls.name is None:
            return

        class HeaderClass(CEnumGeneratorBaseHeader):

            name = f"{cls.name}_header"
            file_suffix = cls.file_suffix

        for k, v in cls.header_attr.items():
            setattr(HeaderClass, k, v)
        cls.added_file_classes = dict(
            cls.added_file_classes,
            header=HeaderClass)

    def generate_header_item(self, name, members):
        lines = [self.generate_declaration(name, members,
                                           for_header=True)]
        if self.define_in_header:
            lines[-1] = 'inline ' + lines[-1] + ' {'
            lines += [
                '  ' + x for x in self.generate_definition(name, members)]
            lines += ["};", ""]
        else:
            lines[-1] += ';'
        return lines

    def generate_declaration(self, name, members, for_header=False):
        raise NotImplementedError

    def generate_definition(self, name, members, **kwargs):
        return super(CEnumGeneratorBaseSource, self).generate_item(
            name, members, **kwargs)

    def generate_item(self, name, members):
        lines = []
        if not self.define_in_header:
            lines += [self.generate_declaration(name, members) + ' {']
            lines += [
                '  ' + x for x in self.generate_definition(name, members)]
            lines += ["};", ""]
        return lines

    def generate(self, indent='', **kwargs):
        lines = []
        if not self.define_in_header:
            lines += self.include_header()
        lines += super(CEnumGeneratorBaseSource, self).generate(
            indent=indent, **kwargs)
        return lines


class CEnumGeneratorMapBase(CEnumGeneratorBaseSource):

    header_attr = {
        'prefix': CEnumGeneratorBase.prefix + [
            '#include <map>',
        ],
    }
    perfile_options = dict(
        CEnumGeneratorBaseSource.perfile_options,
        function_suffix={
            'type': str,
            'help': ("Suffix that should be added the the end of the "
                     "function for returning the enum map"),
        },
        value_type={
            'type': str,
            'help': "C++ type of values in the map",
        },
        specialize_in_source={
            'action': 'store_true',
            'help': ("Specialize the template to get the map in the "
                     "source file instead of the header"),
        },
        dont_specialize={
            'action': 'store_true',
            'help': "Don't special the template function",
        },
    )
    default_value_type = None

    def __init__(self, *args, **kwargs):
        kwargs.setdefault("function_suffix", self.name)
        kwargs.setdefault("value_type", self.default_value_type)
        if kwargs.get('define_in_header', False):
            kwargs['specialize_in_source'] = False
        super(CEnumGeneratorMapBase, self).__init__(*args, **kwargs)

    def generate_value(self, x):
        raise NotImplementedError

    def generate_member(self, x, width=None, width_value=None):
        assert width and width_value
        value = self.generate_value(x)
        pad = (width_value - len(value)) * ' '
        return [f"  {{{x['name']:{width}}, {value}{pad}}},"]

    def generate_declaration(self, name, members, for_header=False):
        func_name = f"{name}_{self.function_suffix}"
        if (not for_header) and self.namespaces:
            func_name = f"{'::'.join(self.namespaces)}::{func_name}"
        func_decl = (
            f"const std::map<{name}, "
            f"{self.value_type}>& {func_name}()")
        return func_decl

    def generate_definition(self, name, members, var_name='map', **kwargs):
        lines = [
            f"static const std::map<{name}, "
            f"{self.value_type}> {var_name} {{"
        ]
        width = self.max_width(members)
        width_value = self.max_width(members, func=self.generate_value)
        lines += super(CEnumGeneratorMapBase, self).generate_definition(
            name, members, width=width, width_value=width_value, **kwargs)
        lines += ["};", "return map;"]
        return lines

    def generate_specialization(self, name, members, **kwargs):
        lines = []
        if self.dont_specialize:
            return lines
        lines += self.generate_function(
            name, specialize=[f'enum {name}'], **kwargs)
        return lines

    def generate_header_item(self, name, members):
        lines = super(CEnumGeneratorMapBase, self).generate_header_item(
            name, members)
        if not self.specialize_in_source:
            lines += self.generate_specialization(name, members,
                                                  for_header=True)
        return lines

    def generate_item(self, name, members):
        lines = []
        lines += super(CEnumGeneratorMapBase, self).generate_item(
            name, members)
        if self.specialize_in_source:
            lines += self.generate_specialization(name, members)
        return lines

    def generate_function(self, name, for_header=False, result=None,
                          specialize_empty=False, **kwargs):
        lines = []
        kwargs.setdefault('spec_param', ['typename'])
        assert len(kwargs['spec_param']) == 1
        specialization = self.specialization(lines, **kwargs)
        inline = 'inline ' if (specialization and for_header) else ''
        key_type = specialization.strip('<>') if specialization else 'T'
        lines += [
            f'{inline}const std::map<{key_type}, '
            f'{self.value_type}>& '
            f'get_enum_{self.function_suffix}{specialization}() {{',
        ]
        if result is None:
            if specialization:
                if specialize_empty:
                    result = 'result'
                    lines += [
                        f'  static const std::map<{key_type}, '
                        f'{self.value_type}> result;',
                    ]
                else:
                    func_name = f"{name}_{self.function_suffix}"
                    if self.namespaces and not for_header:
                        func_name = (
                            f"{'::'.join(self.namespaces)}::{func_name}")
                    result = f'{func_name}()'
            else:
                result = 'result'
                lines += [
                    f'  static const std::map<{key_type}, '
                    f'{self.value_type}> result;',
                    f'  throw std::runtime_error(\"No enum '
                    f'{self.function_suffix} map could be found\");'
                ]
        assert result is not None
        lines += [
            f'  return {result};',
            '}',
        ]
        if (not specialization) and specialize_empty:
            kwargs.update(
                for_header=for_header,
                specialize=[f'enum {specialize_empty}'],
                specialize_empty=specialize_empty,
            )
            lines += self.generate_function(name, **kwargs)
        return lines


class CEnumGeneratorValueMapSource(CEnumGeneratorMapBase):

    name = 'values'
    file_suffix = '_values'
    default_value_type = 'double'

    def generate_value(self, x):
        return str(x['val'])


class CEnumGeneratorNameMapSource(CEnumGeneratorMapBase):

    name = 'names'
    file_suffix = '_names'
    header_attr = dict(
        CEnumGeneratorMapBase.header_attr,
        prefix=CEnumGeneratorMapBase.header_attr['prefix'] + [
            '#include <string>',
        ],
    )
    default_value_type = 'std::string'

    def generate_value(self, x):
        return f"\"{x['abbr']}\""

    def generate_specialization(self, name, members, for_header=False):
        lines = super(
            CEnumGeneratorNameMapSource, self).generate_specialization(
                name, members, for_header=for_header)
        if not self.dont_specialize:
            fglobal = self.parent.get_child('global')
            this_id = f"{fglobal.enum_name}_{name.split('_')[0]}"
            lines += fglobal.generate_param_function(
                fglobal.enum_name, result=this_id,
                for_header=for_header, specialize=[f'enum {name}'])
            # spec_param = [
            #     f"{x}_{name.split('_')[0]}"
            #     for x in fglobal.spec_param
            # ]
            # lines += fglobal.generate_type_struct(
            #     fglobal.enum_name, result=name,
            #     for_header=for_header, specialize=spec_param)
            lines += ['']
        return lines


class CEnumGeneratorGlobalHeader(CEnumGeneratorBase):

    name = 'global'
    file_suffix = ''
    explicit_dst = True
    perfile_options = dict(
        CEnumGeneratorBase.perfile_options,
        enum_name={
            'type': str,
            'help': "Name that should be used for the global enum",
        },
        accum_enum_name={
            'type': str,
            'help': ("Name that should be used for enum accumulated "
                     "between calls"),
            'default': "PARAM_TYPE",
        },
        empty_enum_name={
            'type': str,
            'help': "Name that should be used for empty enum",
            'default': "EMPTY_ENUM",
        },
        strip_suffix={
            'type': str,
            'help': ("Suffix that should be stripped from global enum "
                     "members"),
        },
    )

    def __init__(self, *args, **kwargs):
        kwargs.setdefault('enum_name', self.name.upper())
        kwargs.setdefault('prefixes', {})
        super(CEnumGeneratorGlobalHeader, self).__init__(*args, **kwargs)
        assert self.parent

    def generate_item(self, name, members, width=None):
        assert width
        if self._current_keys['kprefix']:
            name = ''.join(self._current_keys['kprefix'][::-1]).rstrip('_')
        key = f"{self.enum_name}_{name}"
        if self.strip_suffix:
            assert key.endswith(self.strip_suffix)
            key = key.rsplit(self.strip_suffix)[0]
        return [f"{key:{width}},"]

    def generate_type_struct(self, name, result=None, for_header=False,
                             **kwargs):
        assert not self.parent.as_class
        kwargs.setdefault('spec_param', self.spec_param)
        lines = []
        func_name = f'{name}2Enum'
        specialization = self.specialization(lines, **kwargs)
        lines += [
            f'struct {func_name}{specialization} {{',
            'public:',
        ]
        if result is None and (not specialization):
            result = self.empty_enum_name
        assert result is not None
        lines += [
            f'  typedef enum {result} Type;',
            '};',
        ]
        return lines

    def generate_param_function(self, dst, result=None, for_header=False,
                                **kwargs):
        lines = []
        func_name = f'get_enum_{dst.lower()}'
        kwargs.setdefault('spec_param', ['typename'])
        specialization = self.specialization(lines, **kwargs)
        inline = 'inline ' if (specialization and for_header) else ''
        lines += [
            f'{inline}{dst} {func_name}{specialization}() {{',
        ]
        if not specialization:
            lines += [
                f'  throw std::runtime_error(\"No {dst.lower()} '
                f'could be found\");',
            ]
        if result is None and (not specialization):
            result = f'{dst}_NONE'
        assert result is not None
        lines += [
            f'  return {result};',
            '}',
        ]
        if not specialization:
            kwargs.update(
                result=result,
                for_header=for_header,
                specialize=[
                    'enum ' + self.empty_enum_name
                ]
            )
            lines += self.generate_param_function(dst, **kwargs)
        return lines

    @property
    def spec_param(self):
        out = [self.enum_name]
        if self.accum_enum_name:
            out.append(self.accum_enum_name)
        return out

    def generate(self, indent='', **kwargs):
        lines = []
        includes = {'names': [], 'values': []}
        existing_accum_enum = []
        if os.path.isfile(self.dst):
            with open(self.dst, 'r') as fd:
                existing = fd.read().splitlines()
            for x in existing:
                if x.startswith('#include'):
                    for k in ['names', 'values']:
                        base = os.path.basename(
                            self.parent.get_child(k).get_child(
                                'header').dst)
                        if x.endswith(f'{base.split("_")[-1]}"'):
                            if k in self.parent.added_files:
                                includes[k].append(x)
                            break
                    else:
                        lines.append(x)
                elif (self.accum_enum_name
                      and x.startswith(f'  {self.accum_enum_name}_')):
                    new_val = x.split(
                        f'{self.accum_enum_name}_')[-1].split(',')[0].strip()
                    if new_val not in ['NONE', 'MAX']:
                        existing_accum_enum.append(new_val)
        include = self.parent.include_self(
            self.dst, rootdir=self.root_include_dir)
        for x in include:
            if x not in lines:
                lines.append(x)

        def key_len(x):
            out = ''.join(self.prefixes.get(x, [x]))
            if self.strip_suffix:
                out = out.rsplit(self.strip_suffix)[-1]
            return len(out)

        width = (
            key_len(max(self.src.param.keys(), key=key_len))
            + len(self.enum_name) + 1)
        first = f'{self.enum_name}_NONE'
        last = f'{self.enum_name}_MAX'
        lines += [
            f'enum {self.enum_name} {{',
            f'  {first:{width}},',
        ]
        indent += '  '
        lines += super(CEnumGeneratorGlobalHeader, self).generate(
            indent=indent, width=width, **kwargs)
        lines += [
            f'  {last:{width}},',
            "};",
            ""
        ]
        spec_param = [self.enum_name]
        # Param types
        if self.accum_enum_name:
            spec_param.append(self.accum_enum_name)
            new_accum_enum = self.strip_suffix.strip('_')
            if new_accum_enum not in existing_accum_enum:
                existing_accum_enum.append(new_accum_enum)
            lines += self.parent.generate_enum(
                self.accum_enum_name,
                [{'name': x, 'abbr': x} for x in existing_accum_enum],
                prefix_with_type=True, as_class=False)
        # Empty enum
        lines += ['// Empty enum']
        lines += self.parent.generate_enum(
            self.empty_enum_name, [],
            prefix_with_type=True, as_class=False)
        # Utility for getting module id from enum type
        lines += [
            f'// Utility for getting {self.enum_name.lower()} '
            f'id from enum type',
        ]
        lines += self.generate_param_function(
            self.enum_name, for_header=True)
        lines += ['']
        # Utility for getting param type from enum type
        if self.accum_enum_name:
            lines += [
                f'// Utility for getting {self.accum_enum_name.lower()} '
                f'from enum type',
            ]
            lines += self.generate_param_function(
                self.accum_enum_name, for_header=True)
            lines += ['']
        # Utilities for getting names/values from enum type
        for k in ['names', 'values']:
            lines += [
                f'// Utility for getting {k} from enum',
            ]
            lines += self.parent.get_child(k).generate_function(
                self.enum_name, spec_param=['typename'],
                specialize_empty=self.empty_enum_name,
                for_header=True)
            if k in self.parent.added_files:
                new_include = self.parent.get_child(
                    k).get_child('header').include_self(
                        self.dst, rootdir=self.root_include_dir)
                for x in new_include:
                    if x not in includes[k]:
                        includes[k].append(x)
            if includes[k]:
                lines += [f'// Specializations for get_enum_{k}']
                lines += includes[k]
        lines += ['']
        if not self.parent.as_class:
            lines += [
                f'// Utility for getting enum type from '
                f'{self.enum_name.lower()} & '
                f'{self.accum_enum_name.lower()}',
            ]
            lines += self.generate_type_struct(
                self.enum_name, for_header=True)
            # Begin preserved lines
            lines += [self.comment + ' ' + x for x in self.preserve_marker]
            for k, v in self.src.param.items():
                key = k.rsplit(self.strip_suffix)[0]
                lines += self.generate_type_struct(
                    self.enum_name, result=k, for_header=True,
                    specialize=[f'{self.enum_name}_{key}',
                                f'{self.accum_enum_name}'
                                f'{self.strip_suffix}'])
                lines += ['']
        return lines


class CEnumGeneratorHeader(CEnumGeneratorBase):

    name = 'c'
    file_suffix = '_enum'
    perfile_options = dict(
        CEnumGeneratorBase.perfile_options,
        as_class={
            'action': 'store_true', 'default': False,
            'help': "Create enum as a class",
        },
    )
    added_file_classes = {
        'global': CEnumGeneratorGlobalHeader,
        'names': CEnumGeneratorNameMapSource,
        'values': CEnumGeneratorValueMapSource,
    }

    def __init__(self, *args, **kwargs):
        for k in ['names', 'values']:
            kwargs.setdefault(f'kwargs_{k}_header', {})
            kwargs[f'kwargs_{k}_header'].setdefault('include_files', [])
            kwargs[f'kwargs_{k}_header']['include_files'].append(self)
        if kwargs.get('as_class', False):
            self.added_file_classes = dict(self.added_file_classes)
            self.added_section_classes = dict(self.added_section_classes)
            for k in ['names', 'values']:
                self.added_section_classes.setdefault(
                    k, self.added_file_classes.pop(k))
                kwargs.setdefault(f'kwargs_{k}', {})
                kwargs[f'kwargs_{k}']['define_in_header'] = True
                kwargs[f'kwargs_{k}']['dont_specialize'] = True
        super(CEnumGeneratorHeader, self).__init__(*args, **kwargs)

    def generate_member(self, x, width=None, width_val=None):
        assert width is not None and width_val is not None
        val = ''
        docs = ''
        if x.get('explicit_idx', False):
            val = f" = {x['idx']}"
        if x.get('doc', False):
            docs = f"  //!< {x['doc']}"
        return [f"  {x['name']:{width}}{val:{width_val}},{docs}"]

    def generate_item(self, name, members, spec_param=[],
                      specialize=[], as_class=None, **kwargs):
        lines = []
        indent = ''
        enum_name = name
        specialization = self.specialization(
            lines, spec_param=spec_param, specialize=specialize,
            **kwargs)
        if as_class is None:
            as_class = self.as_class
        if as_class:
            lines += [
                f'class {name}{specialization} {{'
            ]
            enum_name = 'Type'
            indent += '  '
        lines += [
            f"{indent}enum {enum_name} {{",
        ]
        width = self.max_width(members)
        width_val = self.max_width(members, key='idx')
        first = "NONE"
        last = "MAX"
        if (not members) or members[0]['name'] != first:
            members.insert(0, {'name': first, 'abbr': first})
        if (not members) or members[-1]['name'] != last:
            members.append({'name': last, 'abbr': last})
        lines += [
            indent + x for x in
            super(CEnumGeneratorHeader, self).generate_item(
                name, members, width=width, width_val=width_val)
        ]
        if as_class:
            if spec_param and not specialize:
                if len(spec_param) == 1:
                    lines += [
                        f"{indent}static const {spec_param[0]} = T;"]
                else:
                    for i, p in enumerate(spec_param):
                        lines += [f"{indent}static const {p} = T{i};"]
            lines += [
                f'{indent}static const {enum_name} All[] = {{',
                f'{", ".join(x["name"] for x in members)}}};',
                f'{indent}}};',
            ]
            for k in ['names', 'values']:
                lines += [
                    indent + x for x in
                    self.added_sections[k].generate_definition(
                        name, members, var_name=k)]
        lines += [
            "};",
            ""
        ]
        return lines


class FortranEnumGeneratorCHeader(EnumGeneratorBase):

    name = 'fortran_wrapper_header'
    file_prefix = 'c_wrapper_'
    file_extension = '.h'
    types_cxx = {}

    def generate_member(self, x, tname=None):
        return [f"  FYGG_API extern const {tname} {x['name']}_F;"]

    def generate_item(self, name, members):
        lines = []
        tname = self.types_cxx.get(name, 'int')
        if tname == 'int':
            return lines
        lines.append('')
        lines += super(FortranEnumGeneratorCHeader, self).generate_item(
            name, members, tname=tname)
        lines.append('')
        return lines

    def generate(self, indent='', **kwargs):
        lines = [
            f'#ifndef {self.basename}_WRAPPER_H_',
            f'#define {self.basename}_WRAPPER_H_',
            '',
            '#ifdef __cplusplus',
            '#include <cstdint>',
            'extern "C" {',
            '#else',
            '#include "stdint.h"',
            '#endif',
        ]
        lines += super(FortranEnumGeneratorCHeader, self).generate(
            indent=indent, **kwargs)
        lines += [
            '',
            '#ifdef __cplusplus',
            '}',
            '#endif',
            '',
            f'#endif // {self.basename}_WRAPPER_H_',
        ]
        return lines


class FortranEnumGeneratorCSource(CMixin, EnumGeneratorBase):

    name = 'fortran_wrapper'
    file_prefix = 'c_wrapper_'
    file_extension = '.c'
    added_file_classes = {
        'header': FortranEnumGeneratorCHeader
    }

    @property
    def types_cxx(self):
        return self.added_files['header'].types_cxx

    @property
    def skip_items(self):
        return self.added_files['header'].skip_items

    def generate_member(self, x, tname=None):
        assert tname
        return [f"  const {tname} {x['name']}_F = {x['name']};"]

    def generate_item(self, name, members):
        lines = []
        tname = self.types_cxx.get(name, 'int')
        if tname == 'int':
            return lines
        lines.append('')
        lines += super(FortranEnumGeneratorCSource, self).generate_item(
            name, members, tname=tname)
        lines.append('')
        return lines

    def generate(self, indent='', **kwargs):
        lines = self.include_header()
        lines += self.src.include_header(caller=self.dst)
        lines += [
            '#ifdef __cplusplus',
            'extern "C" {',
            '#endif',
            ''
        ]
        lines += super(FortranEnumGeneratorCSource, self).generate(
            indent=indent, **kwargs)
        lines += [
            '',
            '#ifdef __cplusplus',
            '}',
            '#endif',
        ]
        return lines


# Version that binds to constants from C
class FortranEnumGeneratorBind(EnumGeneratorBase):

    name = 'fortran_bind'
    file_extension = '.F90'
    added_file_classes = {
        'c_wrapper': FortranEnumGeneratorCSource
    }
    prefix = [
        '#ifndef DOXYGEN_SHOULD_SKIP_THIS',
    ]
    suffix = [
        '#endif',
    ]

    @property
    def types_cxx(self):
        return self.added_files['c_wrapper'].types_cxx

    def generate_member(self, x, tname=None):
        assert tname
        if tname == 'int':
            return [f"        {x['name']} = {x['idx']}, &"]
        else:
            return [
                f"integer(kind=c_{tname}), protected, "
                f"bind(c, name=\"{x['name']}_F\") :: {x['name']}"]

    def generate_item(self, name, members):
        lines = ['']
        tname = self.types_cxx.get(name, 'int')
        if tname == 'int':
            lines += [
                'enum, bind( C )',
                '   enumerator :: &',
            ]
        lines += super(FortranEnumGeneratorBind, self).generate_item(
            name, members, tname=tname)
        if tname == 'int':
            lines[-1] = lines[-1].split(',')[0]
            lines += [
                'end enum',
            ]
        lines += ['']
        return lines


# Version that just sets the values directly
class FortranEnumGeneratorValue(EnumGeneratorBase):

    name = 'fortran_value'
    file_extension = '.F90'
    added_file_classes = {
        'c_wrapper': FortranEnumGeneratorCSource
    }
    prefix = [
        '#ifndef DOXYGEN_SHOULD_SKIP_THIS',
    ]
    suffix = [
        '#endif',
    ]

    @property
    def types_cxx(self):
        return self.added_files['c_wrapper'].types_cxx

    def generate_member(self, x, tname=None, tsuffix=None):
        assert tname
        if tname == 'int':
            return [f"        {x['name']} = {x['idx']}, &"]
        else:
            assert tsuffix
            return [
                f"integer(kind={tsuffix}), parameter :: "
                f"{x['name']} = {x['idx']}_{tsuffix}"]

    def generate_item(self, name, members):
        lines = ['']
        tname = self.types_cxx.get(name, 'int')
        tsuffix = None
        if tname == 'int':
            lines += [
                '  enum, bind( C )',
                '     enumerator :: &',
            ]
        else:
            tsuffix = tname.split('_')[0]
        lines += super(FortranEnumGeneratorValue, self).generate_item(
            name, members, tname=tname, tsuffix=tsuffix)
        if tname == 'int':
            lines[-1] = lines[-1].split(',')[0]
            lines += [
                '  end enum',
            ]
        lines += ['']
        return lines


def rename_source(directory, src_suffix, dst_suffix, ext):
    import shutil
    src_regex = os.path.join(directory, f"*_{src_suffix}{ext}")
    files = sorted(glob.glob(src_regex))
    if not files:
        raise Exception(f"No files found matching {src_regex}")
    for src in files:
        dst = src.replace(src_suffix, dst_suffix)
        shutil.move(src, dst)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        "Generate enum source code & header files based on "
        "the values defined in a C/C++ source file")
    parser.add_argument("src", type=str,
                        help=("Source file that enums should be "
                              "extracted from"))
    parser.add_argument("--dst", type=str,
                        help=("Location where generated file should be "
                              "written"))
    parser.add_argument("--src-type", type=str,
                        choices=registered_classes('parser'),
                        default='param',
                        help="Type of parser to use on src file")
    parser.add_argument("--dst-type", type=str,
                        choices=registered_classes('generator'),
                        default='names',
                        help=("Type of generator that should be used "
                              "to create dst file"))
    parser.add_argument("--src-regex", action="store_true",
                        help=("Treat src as a regex to find file(s) to "
                              "parse"))
    parser.add_argument("--overwrite", action="store_true",
                        help="Overwrite any existing file(s)")
    parser.add_argument("--verbose", action="store_true",
                        help="Display the generated file content")
    parser.add_argument("--dry-run", action="store_true",
                        help="Run without writing any file(s)")
    parser.add_argument("--skip-children", action="store_true",
                        help="Don't generate the default child files")
    parser.add_argument("--root-include-dir", type=str,
                        help=("Root directory where include files are "
                              "located"))
    parser.add_argument("--prefix-with-type", action="store_true",
                        help="Prefix enums w/ their type")
    parser.add_argument("--prefix-by-split", type=str,
                        help=("Add prefixes to enum members by splitting "
                              "the name of the enum set by this string"))
    parser.add_argument("--rename-source", type=str,
                        help=("Rename source files in this directory "
                              "with the provided src suffix to use the "
                              "provided dst suffix"))
    for x in registered_classes('generator', return_classes=True):
        x.add_arguments(parser)
    args = parser.parse_args()
    if args.rename_source:
        src_cls = get_registered_class('parser', args.src_type)
        rename_source(args.rename_source, args.src, args.dst,
                      src_cls.file_extension)
    else:
        src = get_registered_class('parser', args.src_type)(
            args.src, verbose=args.verbose, is_regex=args.src_regex)
        kws = {}
        if args.prefix_by_split:
            assert not args.prefix_with_type
            kws['prefixes'] = src.prefix_by_split(args.prefix_by_split)
        elif args.prefix_with_type:
            kws['prefixes'] = {k: [f"{k}_"] for k in src.param.keys()}
        for x in registered_classes('generator', return_classes=True):
            x.get_arguments(args, kws)
        dst = get_registered_class('generator', args.dst_type)(
            src, dst=args.dst, overwrite=args.overwrite, verbose=args.verbose,
            dry_run=args.dry_run, skip_children=args.skip_children,
            root_include_dir=args.root_include_dir, **kws)
