// This code is generated by generate_enum.py and should not be
// modified directly
#include "enums/enums.hpp"


using namespace ePhotosynthesis;

template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::all = {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPHr, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytc1, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPo, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPoQH2, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::QHsemi, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytbL, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qi, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Q, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytbH, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qn, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qr, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::QH2, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytc2, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::P700, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ADP, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ATP, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Ks, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Mgs, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Cls, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Aip, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::U, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::An, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Fdn, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::BFHs, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::BFHl, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::PHs, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::PHl, ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::NADPH};
template<> 
const std::map<ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::names = {
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPHr  , "ISPHr"  },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytc1  , "cytc1"  },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPo   , "ISPo"   },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPoQH2, "ISPoQH2"},
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::QHsemi , "QHsemi" },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytbL  , "cytbL"  },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qi     , "Qi"     },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Q      , "Q"      },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytbH  , "cytbH"  },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qn     , "Qn"     },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qr     , "Qr"     },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::QH2    , "QH2"    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytc2  , "cytc2"  },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::P700   , "P700"   },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ADP    , "ADP"    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ATP    , "ATP"    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Ks     , "Ks"     },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Mgs    , "Mgs"    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Cls    , "Cls"    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Aip    , "Aip"    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::U      , "U"      },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::An     , "An"     },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Fdn    , "Fdn"    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::BFHs   , "BFHs"   },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::BFHl   , "BFHl"   },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::PHs    , "PHs"    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::PHl    , "PHl"    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::NADPH  , "NADPH"  },
};
template<> 
const std::map<ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::defaults = {
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPHr  , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytc1  , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPo   , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPoQH2, 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::QHsemi , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytbL  , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qi     , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Q      , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytbH  , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qn     , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qr     , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::QH2    , 5.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytc2  , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::P700   , 0.5    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ADP    , 0.82   },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ATP    , 0.68   },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Ks     , 10.0   },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Mgs    , 5.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Cls    , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Aip    , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::U      , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::An     , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Fdn    , 0.3    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::BFHs   , 19.0001},
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::BFHl   , 19.0001},
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::PHs    , 7.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::PHl    , 7.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::NADPH  , 0.21   },
};
template<> 
const std::map<ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::defaults_C3 = {
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPHr  , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytc1  , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPo   , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ISPoQH2, 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::QHsemi , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytbL  , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qi     , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Q      , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytbH  , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qn     , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Qr     , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::QH2    , 5.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::cytc2  , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::P700   , 0.5    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ADP    , 0.82   },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::ATP    , 0.68   },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Ks     , 10.0   },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Mgs    , 5.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Cls    , 1.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Aip    , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::U      , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::An     , 0.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Fdn    , 0.3    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::BFHs   , 19.0001},
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::BFHl   , 19.0001},
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::PHs    , 7.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::PHl    , 7.0    },
  {ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::NADPH  , 0.21   },
};
template<> 
const std::map<ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::all = {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::A, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::U, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680ePheo, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680pPheon, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680pPheo, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680Pheon, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Yz, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S1T, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S2T, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S3T, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S0T, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S1Tp, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S2Tp, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S3Tp, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S0Tp, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQB, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQB, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQBn, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQBn, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQB2n, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQB2n, ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::PQn};
template<> 
const std::map<ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::names = {
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::A         , "A"         },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::U         , "U"         },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680ePheo , "P680ePheo" },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680pPheon, "P680pPheon"},
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680pPheo , "P680pPheo" },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680Pheon , "P680Pheon" },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Yz        , "Yz"        },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S1T       , "S1T"       },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S2T       , "S2T"       },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S3T       , "S3T"       },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S0T       , "S0T"       },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S1Tp      , "S1Tp"      },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S2Tp      , "S2Tp"      },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S3Tp      , "S3Tp"      },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S0Tp      , "S0Tp"      },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQB      , "QAQB"      },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQB     , "QAnQB"     },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQBn     , "QAQBn"     },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQBn    , "QAnQBn"    },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQB2n    , "QAQB2n"    },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQB2n   , "QAnQB2n"   },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::PQn       , "PQn"       },
};
template<> 
const std::map<ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::defaults = {
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::A         , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::U         , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680ePheo , 1  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680pPheon, 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680pPheo , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680Pheon , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Yz        , 1  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S1T       , 0.8},
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S2T       , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S3T       , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S0T       , 0.2},
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S1Tp      , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S2Tp      , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S3Tp      , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S0Tp      , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQB      , 1  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQB     , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQBn     , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQBn    , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQB2n    , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQB2n   , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::PQn       , 5  },
};
template<> 
const std::map<ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::defaults_C3 = {
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::A         , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::U         , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680ePheo , 1  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680pPheon, 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680pPheo , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::P680Pheon , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Yz        , 1  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S1T       , 0.8},
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S2T       , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S3T       , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S0T       , 0.2},
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S1Tp      , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S2Tp      , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S3Tp      , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::S0Tp      , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQB      , 1  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQB     , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQBn     , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQBn    , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAQB2n    , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::QAnQB2n   , 0  },
  {ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::PQn       , 5  },
};
template<> 
const std::map<ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::all = {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCEA, ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCA, ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::PGCA, ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCAc, ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GOAc, ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::SERc, ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GLYc, ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::HPRc, ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCEAc, ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::RuBP, ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::_v131};
template<> 
const std::map<ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::names = {
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCEA , "GCEA" },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCA  , "GCA"  },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::PGCA , "PGCA" },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCAc , "GCAc" },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GOAc , "GOAc" },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::SERc , "SERc" },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GLYc , "GLYc" },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::HPRc , "HPRc" },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCEAc, "GCEAc"},
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::RuBP , "RuBP" },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::_v131, "_v131"},
};
template<> 
const std::map<ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::defaults = {
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCEA , 0.1812},
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCA  , 0.36  },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::PGCA , 0.0029},
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCAc , 0.36  },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GOAc , 0.028 },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::SERc , 7.5   },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GLYc , 1.8   },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::HPRc , 0.0035},
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCEAc, 0.1812},
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::RuBP , 2.0   },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::_v131, 0.0   },
};
template<> 
const std::map<ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::defaults_C3 = {
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCEA , 0.1812},
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCA  , 0.36  },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::PGCA , 0.0029},
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCAc , 0.36  },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GOAc , 0.028 },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::SERc , 7.5   },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GLYc , 1.8   },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::HPRc , 0.0035},
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::GCEAc, 0.1812},
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::RuBP , 2.0   },
  {ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::_v131, 0.0   },
};
template<> 
const std::map<ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::constant = {
  ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::_v131,
};
template<> 
const std::vector<ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::nonvector = {
  ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::_v131,
};
template<> 
std::vector<ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::all = {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::RuBP, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::PGA, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::DPGA, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::T3P, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::ADPG, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::FBP, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::E4P, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::S7P, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::SBP, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::ATP, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::HexP, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::PenP, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_Pi, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_ADP, ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_v1};
template<> 
const std::map<ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::names = {
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::RuBP, "RuBP"},
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::PGA , "PGA" },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::DPGA, "DPGA"},
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::T3P , "T3P" },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::ADPG, "ADPG"},
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::FBP , "FBP" },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::E4P , "E4P" },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::S7P , "S7P" },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::SBP , "SBP" },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::ATP , "ATP" },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::HexP, "HexP"},
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::PenP, "PenP"},
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_Pi , "_Pi" },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_ADP, "_ADP"},
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_v1 , "_v1" },
};
template<> 
const std::map<ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::defaults = {
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::RuBP, 2.000 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::PGA , 2.400 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::DPGA, 0.0011},
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::T3P , 0.5   },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::ADPG, 0.005 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::FBP , 0.670 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::E4P , 0.050 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::S7P , 2.000 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::SBP , 0.300 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::ATP , 0.68  },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::HexP, 2.2   },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::PenP, 0.25  },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_Pi , 0.0   },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_ADP, 0.0   },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_v1 , 0.0   },
};
template<> 
const std::map<ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::defaults_C3 = {
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::RuBP, 2.000 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::PGA , 2.400 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::DPGA, 0.0011},
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::T3P , 0.5   },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::ADPG, 0.005 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::FBP , 0.670 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::E4P , 0.050 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::S7P , 2.000 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::SBP , 0.300 },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::ATP , 0.68  },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::HexP, 2.2   },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::PenP, 0.25  },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_Pi , 0.0   },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_ADP, 0.0   },
  {ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_v1 , 0.0   },
};
template<> 
const std::map<ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::constant = {
  ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_Pi ,
  ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_ADP,
  ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_v1 ,
};
template<> 
const std::vector<ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::nonvector = {
  ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_Pi ,
  ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_ADP,
  ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::_v1 ,
};
template<> 
std::vector<ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::all = {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::GAPDH, ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::FBPase, ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::SBPase, ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::PRK, ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::ATPase, ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::ATPGPP, ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::MDH, ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Thio, ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Fd, ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::RuACT, ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Coeff};
template<> 
const std::map<ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::names = {
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::GAPDH , "GAPDH" },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::FBPase, "FBPase"},
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::SBPase, "SBPase"},
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::PRK   , "PRK"   },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::ATPase, "ATPase"},
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::ATPGPP, "ATPGPP"},
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::MDH   , "MDH"   },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Thio  , "Thio"  },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Fd    , "Fd"    },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::RuACT , "RuACT" },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Coeff , "Coeff" },
};
template<> 
const std::map<ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::defaults = {
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::GAPDH , 1.0972130787798991e-08},
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::FBPase, 4.309416074121956e-08 },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::SBPase, 2.1645021645021643e-07},
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::PRK   , 6.097560975609756e-08 },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::ATPase, 2e-08                 },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::ATPGPP, 4.7619047619047623e-07},
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::MDH   , 0.0                   },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Thio  , 0.081                 },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Fd    , 0.081                 },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::RuACT , 0.0056                },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Coeff , 0.3                   },
};
template<> 
const std::map<ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::defaults_C3 = {
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::GAPDH , 1.0972130787798991e-08},
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::FBPase, 4.309416074121956e-08 },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::SBPase, 2.1645021645021643e-07},
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::PRK   , 6.097560975609756e-08 },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::ATPase, 2e-08                 },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::ATPGPP, 4.7619047619047623e-07},
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::MDH   , 0.0                   },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Thio  , 0.081                 },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Fd    , 0.081                 },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::RuACT , 0.0056                },
  {ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Coeff , 0.3                   },
};
template<> 
const std::map<ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::constant = {
  ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Coeff ,
};
template<> 
const std::vector<ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::calculated = {
  ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::GAPDH ,
  ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::FBPase,
  ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::SBPase,
  ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::PRK   ,
  ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::ATPase,
  ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::ATPGPP,
};
template<> 
const std::vector<ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::nonvector = {
  ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Coeff ,
};
template<> 
std::vector<ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::all = {ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Thion};
template<> 
const std::map<ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::names = {
  {ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Thion, "Thion"},
};
template<> 
const std::map<ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::defaults = {
  {ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Thion, 0.25},
};
template<> 
const std::map<ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::defaults_C3 = {
  {ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Thion, 0.25},
};
template<> 
const std::map<ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::all = {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::ER, ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Eaf, ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::ECMR, ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::RuBP};
template<> 
const std::map<ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::names = {
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::ER  , "ER"  },
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Eaf , "Eaf" },
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::ECMR, "ECMR"},
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::RuBP, "RuBP"},
};
template<> 
const std::map<ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::defaults = {
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::ER  , 0.20},
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Eaf , 0.20},
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::ECMR, 0.8 },
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::RuBP, 2.0 },
};
template<> 
const std::map<ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::defaults_C3 = {
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::ER  , 0.20},
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Eaf , 0.20},
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::ECMR, 0.8 },
  {ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::RuBP, 2.0 },
};
template<> 
const std::map<ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::all = {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::T3Pc, ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::FBPc, ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::HexPc, ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::F26BPc, ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::UDPGc, ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::SUCP, ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::SUC, ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::PGAc};
template<> 
const std::map<ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::names = {
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::T3Pc  , "T3Pc"  },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::FBPc  , "FBPc"  },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::HexPc , "HexPc" },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::F26BPc, "F26BPc"},
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::UDPGc , "UDPGc" },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::SUCP  , "SUCP"  },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::SUC   , "SUC"   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::PGAc  , "PGAc"  },
};
template<> 
const std::map<ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::defaults = {
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::T3Pc  , 2.0   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::FBPc  , 2.0   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::HexPc , 5.8   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::F26BPc, 7.8e-6},
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::UDPGc , 0.57  },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::SUCP  , 0.0   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::SUC   , 0.0   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::PGAc  , 0.5   },
};
template<> 
const std::map<ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::defaults_C3 = {
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::T3Pc  , 2.0   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::FBPc  , 2.0   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::HexPc , 5.8   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::F26BPc, 7.8e-6},
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::UDPGc , 0.57  },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::SUCP  , 0.0   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::SUC   , 0.0   },
  {ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::PGAc  , 0.5   },
};
template<> 
const std::map<ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::all = {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Vx, ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Ax, ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Zx, ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::ABA};
template<> 
const std::map<ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::names = {
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Vx  , "Vx"  },
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Ax  , "Ax"  },
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Zx  , "Zx"  },
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::ABA , "ABA" },
};
template<> 
const std::map<ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::defaults = {
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Vx  , 160.0},
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Ax  , 10.0 },
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Zx  , 5.0  },
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::ABA , 1.0  },
};
template<> 
const std::map<ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::defaults_C3 = {
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Vx  , 160.0},
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Ax  , 10.0 },
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Zx  , 5.0  },
  {ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::ABA , 1.0  },
};
template<> 
const std::map<ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::skipped = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::glymaids = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::skipped = {
};

