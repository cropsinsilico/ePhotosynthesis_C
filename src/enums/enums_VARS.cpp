// This code is generated by generate_enum.py and should not be
// modified directly
#include "enums/enums.hpp"


using namespace ePhotosynthesis;

template<> const std::vector<typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::all = {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)GLight, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2_cond, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ADP, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestATPCost, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS2BF_Pi, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS_PR_Param, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio};
template<> 
const std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::names = {
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR              , "AVR"              },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR              , "HPR"              },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2               , "O2"               },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond         , "CO2_cond"         },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)GLight           , "GLight"           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2_cond          , "O2_cond"          },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio        , "PS12ratio"        },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ADP              , "ADP"              },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi               , "Pi"               },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestATPCost      , "TestATPCost"      },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in           , "CO2_in"           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps       , "TestLi_Wps"       },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi           , "TestLi"           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS2BF_Pi         , "PS2BF_Pi"         },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS_PR_Param      , "PS_PR_Param"      },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp               , "Tp"               },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa             , "alfa"             },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc               , "fc"               },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam       , "lightParam"       },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1           , "alpha1"           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2           , "alpha2"           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI       , "input_LHCI"       },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII      , "input_LHCII"      },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI        , "input_PSI"        },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore   , "input_PSIIcore"   },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize  , "PSIIantennaSize"  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize   , "PSIantennaSize"   },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio, "ProteinTotalRatio"},
};
template<> 
const std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::defaults = {
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR              , 30.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR              , 4.66 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2               , 210.0},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond         , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)GLight           , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2_cond          , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio        , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ADP              , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi               , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestATPCost      , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in           , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps       , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi           , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS2BF_Pi         , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS_PR_Param      , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp               , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa             , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc               , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam       , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1           , 1.205},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2           , 2.06 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI       , 6.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII      , 13.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI        , 1.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore   , 1.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize  , 37.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize   , 95.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio, 0.973},
};
template<> 
const std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::defaults_C3 = {
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR              , 30.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR              , 4.66 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2               , 210.0},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond         , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)GLight           , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2_cond          , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio        , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ADP              , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi               , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestATPCost      , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in           , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps       , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi           , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS2BF_Pi         , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS_PR_Param      , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp               , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa             , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc               , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam       , 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1           , 1.205},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2           , 2.06 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI       , 6.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII      , 13.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI        , 1.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore   , 1.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize  , 37.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize   , 95.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio, 0.973},
};
template<> 
const std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::glymaids = {
};
template<> 
const std::map<std::string, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::aliases = {
  {"ATPCost"           , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestATPCost      },
  {"CO2"               , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in           },
  {"Air_CO2"           , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in           },
  {"PAR"               , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi           },
  {"Radiation_PAR"     , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi           },
  {"Temp"              , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp               },
  {"WeatherTemperature", ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp               },
};
template<> 
const std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::docs = {
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR              , "[CONST] The conversion factor between volume and area (micromole per meter square per second and milimole per liter per second)."},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR              , "[CONST]"                                                                                                                         },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2               , "[CONST] Seems to be unused currently"                                                                                            },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond         , "[CALC] Intercellular CO2 in umoles m^{-3}, calculated from air CO2 (CO2_in)"                                                     },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio        , "[CALC] Calcualted from input_PSI & input_PSIIcore in SYSInitial"                                                                 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi               , "[CALC] Pi used when useC3 is true and EPS module selected"                                                                       },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestATPCost      , "[ALIASES={ATPCost}] Extra ATP cost when useC3 is false (in units per area)"                                                      },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in           , "[CALC,ALIASES={CO2,Air_CO2}] Air CO2 concentration in ppm"                                                                       },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps       , "[CALC] Light intensity (in units of W s^{-1})"                                                                                   },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi           , "[CALC,ALIASES={PAR,Radiation_PAR}] Light intensity (in units of umoles m^{-2} s^{-1})"                                           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS2BF_Pi         , "Pi Shared by PS & BF modules when useC3 is false and EPS module is selected"                                                     },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS_PR_Param      , "Seems to unused currently"                                                                                                       },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp               , "[ALIASES={Temp,WeatherTemperature}] Temperature"                                                                                 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa             , "[CONST] Used for scaling light (*= alpha * (1 - fc))"                                                                            },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc               , "[CONST] Used for scaling light (*= alpha * (1 - fc))"                                                                            },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam       , "[CALC]"                                                                                                                          },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1           , "[CONST] originally 1.205 in C++ code, 1 for Matlab equivalent"                                                                   },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2           , "[CONST] originally 2.06 in C++ code, 1 for Matlab equivalent"                                                                    },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI       , "[CONST] Used to set FIBF::ChlPSI in SYSInitial"                                                                                  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII      , "[CONST] Used to set FIBF::ChlT in SYSInitial"                                                                                    },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI        , "[CONST] Used to set FIBF::ChlPSI & PS12ratio in SYSInitial"                                                                      },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore   , "[CONST] Used to set FIBF::ChlT2, FIBF::ChlT & PS12ratio in SYSInitial"                                                           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize  , "[CONST] Used to set FIBF::ChlT2 & FIBF::ChlT in SYSInitial"                                                                      },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize   , "[CONST] Used to set FIBF::ChlPSI in SYSInitial"                                                                                  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio, "[CONST] Scaling factor for CM GRN expression levels"                                                                             },
};
template<> 
std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, int> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::value_flags = {
};
template<> 
const std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, int> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::static_value_flags = {
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR              , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR              , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2               , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond         , (STATIC_VALUE_FLAG_CALC) },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio        , (STATIC_VALUE_FLAG_CALC) },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi               , (STATIC_VALUE_FLAG_CALC) },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in           , (STATIC_VALUE_FLAG_CALC) },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps       , (STATIC_VALUE_FLAG_CALC) },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi           , (STATIC_VALUE_FLAG_CALC) },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa             , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc               , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam       , (STATIC_VALUE_FLAG_CALC) },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1           , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2           , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI       , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII      , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI        , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore   , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize  , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize   , (STATIC_VALUE_FLAG_CONST)},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio, (STATIC_VALUE_FLAG_CONST)},
};

template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::glymaids = {
};
template<> 
const std::map<std::string, ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::aliases = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::docs = {
};
template<> 
std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, int> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::value_flags = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, int> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::static_value_flags = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::glymaids = {
};
template<> 
const std::map<std::string, ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::aliases = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::docs = {
};
template<> 
std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, int> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::value_flags = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, int> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::static_value_flags = {
};

