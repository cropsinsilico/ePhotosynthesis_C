// This code is generated by generate_enum.py and should not be
// modified directly
#include "enums/enums.hpp"


using namespace ePhotosynthesis;

template<> const std::vector<typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::all = {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)GLight, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2_cond, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ADP, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestATPCost, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS2BF_Pi, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS_PR_Param, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio};
template<> 
const std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::names = {
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR, "AVR"              },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR, "HPR"              },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2, "O2"               },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond, "CO2_cond"         },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)GLight, "GLight"           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2_cond, "O2_cond"          },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio, "PS12ratio"        },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ADP, "ADP"              },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi, "Pi"               },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestATPCost, "TestATPCost"      },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in, "CO2_in"           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps, "TestLi_Wps"       },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi, "TestLi"           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS2BF_Pi, "PS2BF_Pi"         },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS_PR_Param, "PS_PR_Param"      },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp, "Tp"               },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa, "alfa"             },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc, "fc"               },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam, "lightParam"       },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1, "alpha1"           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2, "alpha2"           },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI, "input_LHCI"       },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII, "input_LHCII"      },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI, "input_PSI"        },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore, "input_PSIIcore"   },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize, "PSIIantennaSize"  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize, "PSIantennaSize"   },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio, "ProteinTotalRatio"},
};
template<> 
const std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::defaults = {
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR, 30.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR, 4.66 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2, 210.0},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)GLight, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2_cond, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ADP, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestATPCost, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS2BF_Pi, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS_PR_Param, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1, 1.205},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2, 2.06 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI, 6.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII, 13.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI, 1.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore, 1.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize, 37.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize, 95.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio, 0.973},
};
template<> 
const std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::defaults_C3 = {
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR, 30.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR, 4.66 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2, 210.0},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)GLight, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2_cond, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ADP, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestATPCost, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS2BF_Pi, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS_PR_Param, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam, 0.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1, 1.205},
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2, 2.06 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI, 6.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII, 13.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI, 1.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore, 1.0  },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize, 37.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize, 95.0 },
  {ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio, 0.973},
};
template<> 
const std::map<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::glymaids = {
};
template<> 
const std::map<std::string, ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::aliases = {
  {"CO2"               , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in},
  {"Air_CO2"           , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in},
  {"PAR"               , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi},
  {"Radiation_PAR"     , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi},
  {"Temp"              , ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp},
  {"WeatherTemperature", ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Tp},
};
template<> 
const std::vector<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::constant = {
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)AVR,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)HPR,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)O2,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alfa,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)fc,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha1,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)alpha2,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCI,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_LHCII,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSI,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)input_PSIIcore,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIIantennaSize,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PSIantennaSize,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)ProteinTotalRatio,
};
template<> 
const std::vector<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::calculated = {
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_cond,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)PS12ratio,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)Pi,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)CO2_in,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi_Wps,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)TestLi,
  ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::SCOPED_ENUM_TYPE(Type)lightParam,
};
template<> 
const std::vector<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::skipped = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::resetone = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::initonce = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::glymaids = {
};
template<> 
const std::map<std::string, ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::aliases = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::skipped = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::resetone = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VARS>::initonce = {
};

template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::all = {};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::names = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::defaults = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::defaults_C3 = {
};
template<> 
const std::map<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::glymaids = {
};
template<> 
const std::map<std::string, ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::aliases = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::constant = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::calculated = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::nonvector = {
};
template<> 
std::vector<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::skipped = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::resetone = {
};
template<> 
const std::vector<ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VARS>::initonce = {
};

