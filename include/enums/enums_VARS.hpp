// This code is generated by generate_enum.py and should not be
// modified directly
#pragma once

#include "enums/enums_helpers.hpp"

namespace ePhotosynthesis {
  #ifndef EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type : int {
    MEMBERS_ALLVARS
  };
  typedef typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type ENUM_ALL_VARS;
  #endif  // EPHOTO_USE_SCOPED_ENUM
  template<>
  const std::vector<typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::all;
  template<>
  const std::map<typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::names;
  template<>
  const std::map<typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::defaults;
  template<>
  const std::map<typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, double> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::defaults_C3;
  template<>
  const std::map<typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::glymaids;
  template<>
  const std::map<std::string, typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::aliases;
  template<>
  const std::map<typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, std::string> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::docs;
  template<>
  std::map<typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, int> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::value_flags;
  template<>
  const std::map<typename ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::Type, int> ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::static_value_flags;
  template<>
  std::string ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS>::error_prefix();
  std::ostream& operator<<(std::ostream& out, const ENUM_ALL_VARS& x);
  template<>
  struct enum_helper_inv<ENUM_ALL_VARS> {
    typedef ENUM_ALL_VARS type;
    static const MODULE module = MODULE_ALL;
    static const PARAM_TYPE param_type = PARAM_TYPE_VARS;
  };
  namespace VARS {
    typedef ValueSetEnum<MODULE_ALL, PARAM_TYPE_VARS> ALL;
  }
}


