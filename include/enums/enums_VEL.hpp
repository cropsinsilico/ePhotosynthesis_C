// This code is generated by generate_enum.py and should not be
// modified directly
#pragma once

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_BF_VEL : int {
    NONE        ,
    Vbf1        ,
    Vbf2        ,
    Vbf3        ,
    Vbf4        ,
    Vbf5        ,
    Vbf6        ,
    Vbf7        ,
    Vbf8        ,
    Vbf9        ,
    Vbf10       ,
    Vbf11       ,
    Vqi         ,
    Vipc        ,
    Vicp        ,
    Vinc        ,
    Vinp        ,
    Vdp         ,
    Vdc         ,
    Vfp         ,
    Vfc         ,
    Vsfd        ,
    VsATP       ,
    VgPQH2      ,
    JKc         ,
    JMgc        ,
    JClc        ,
    Vbf15       ,
    Vbf16       ,
    vbfn2       ,
    VsNADPH     ,
    vcet        ,
    MAX         ,
};
template<>
struct enum_helper<MODULE_BF, PARAM_TYPE_VEL> {
  typedef ENUM_BF_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type : int {
    NONE        ,
    Vbf1        ,
    Vbf2        ,
    Vbf3        ,
    Vbf4        ,
    Vbf5        ,
    Vbf6        ,
    Vbf7        ,
    Vbf8        ,
    Vbf9        ,
    Vbf10       ,
    Vbf11       ,
    Vqi         ,
    Vipc        ,
    Vicp        ,
    Vinc        ,
    Vinp        ,
    Vdp         ,
    Vdc         ,
    Vfp         ,
    Vfc         ,
    Vsfd        ,
    VsATP       ,
    VgPQH2      ,
    JKc         ,
    JMgc        ,
    JClc        ,
    Vbf15       ,
    Vbf16       ,
    vbfn2       ,
    VsNADPH     ,
    vcet        ,
    MAX         ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_BFVel		\
    NONE        ,		\
    Vbf1        ,		\
    Vbf2        ,		\
    Vbf3        ,		\
    Vbf4        ,		\
    Vbf5        ,		\
    Vbf6        ,		\
    Vbf7        ,		\
    Vbf8        ,		\
    Vbf9        ,		\
    Vbf10       ,		\
    Vbf11       ,		\
    Vqi         ,		\
    Vipc        ,		\
    Vicp        ,		\
    Vinc        ,		\
    Vinp        ,		\
    Vdp         ,		\
    Vdc         ,		\
    Vfp         ,		\
    Vfc         ,		\
    Vsfd        ,		\
    VsATP       ,		\
    VgPQH2      ,		\
    JKc         ,		\
    JMgc        ,		\
    JClc        ,		\
    Vbf15       ,		\
    Vbf16       ,		\
    vbfn2       ,		\
    VsNADPH     ,		\
    vcet        ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_BF, PARAM_TYPE_VEL> BF;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_FIBF_VEL : int {
    NONE   ,
    MAX    ,
};
template<>
struct enum_helper<MODULE_FIBF, PARAM_TYPE_VEL> {
  typedef ENUM_FIBF_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type : int {
    NONE   ,
    MAX    ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_FIBFVel		\
    NONE   ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_FIBF, PARAM_TYPE_VEL> FIBF;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_FI_VEL : int {
    NONE         ,
    vA_d         ,  //!< vA_d  The rate of heat dissipation from peripheral antenna
    vA_f         ,  //!< vA_f  The rate of fluorescence emission from peripheral antenna
    vA_U         ,  //!< vA_U  The rate of exciton transfer from peripheral antenna to core antenna in open reaction center
    vU_A         ,  //!< vU_A  The rate of exciton transfer from core antenna to perpheral antenna in open center
    vU_f         ,  //!< vU_f  The rate of fluorescence emission from core antenna
    vU_d         ,  //!< vU_d  The rate of heat dissipation from core antenna
    v1           ,  //!< v1  The rate of primary charge separation
    v_r1         ,  //!< v_r1  The rate of charge recombination
    vS1_S2       ,  //!< vS1_S2  The rate of transition from S1 to S2
    vS2_S3       ,  //!< vS2_S3  The rate of transition from S2 to S3
    vS3_S0       ,  //!< vS3_S0  The rate of transition from S3 to S0
    vS0_S1       ,  //!< vS0_S1  The rate of transition from S0 to S1
    vz_1         ,  //!< vz_1  The rate of P680p reduction
    v1z_1        ,  //!< v1z_1  The rate of oxidation of S1T by P680pPheon
    v2z_1        ,  //!< v2z_1  The rate of oxidation of S2T  by P680pPheon
    v3z_1        ,  //!< v3z_1  The rate of oxidation of S3T  by P680pPheon
    v0z_1        ,  //!< v0z_1  The rate of oxidation of S0T  by P680pPheon
    vz_2         ,  //!< vz_2  The rate of P680pPheon reduction
    v1z_2        ,  //!< v1z_2  The rate of oxidation of S1T by P680pPheo
    v2z_2        ,  //!< v2z_2  The rate of oxidation of S2T  by P680pPheo
    v3z_2        ,  //!< v3z_2  The rate of oxidation of S3T  by P680pPheo
    v0z_2        ,  //!< v0z_2  The rate of oxidation of S0T  by P680pPheo
    v1z          ,
    v2z          ,
    v3z          ,
    v0z          ,
    vAB1         ,  //!< vAB1  The rate of electron transfer from QA- to QB
    vBA1         ,  //!< vBA1  The rate of electron transfer from QB- to QA
    vAB2         ,  //!< vAB2  The rate of electron transfer from QA- to QB-
    vBA2         ,  //!< vBA2  The rate of electron transfer from QB2- TO QA
    v3           ,  //!< v3  The rate of exchange of QAQBH2 with PQ
    v_r3         ,  //!< v_r3  The rate of exchange of QAQB with PQH2
    v3_n         ,  //!< v3_n  The rate of exchange of QAnQBH2 with PQ
    v_r3_n       ,  //!< v_r3_n  The rate of exchange of QAnQB with PQH2
    v_pq_ox      ,  //!< v_pq_ox  The rate of PQH2 oxidation
    Ic           ,  //!< Ic  The incident light on the core antenna
    Ia           ,  //!< Ia  The incident light on the peripheral antenna
    v2_1         ,  //!< v2_1  The rate of P680pPheon oxidation
    v2_2         ,  //!< v2_1  The rate of P680pPheon oxidation
    v2_00_1      ,  //!< v2_00_1  The rate of reduction of QAQB by P680pPheon
    v2_01_1      ,  //!< v2_01_1  The rate of reduction of QAQBn by P680pPheon
    v2_02_1      ,  //!< v2_02_1  The rate of reduction of QAQB2n by P680pPheon
    v2_00_2      ,  //!< v2_00_2  The rate of reduction of QAQB by P680Pheon
    v2_01_2      ,  //!< v2_01_2  The rate of reduction of QAQBn by P680Pheon
    v2_02_2      ,  //!< v2_02_2  The rate of reduction of QAQB2n by P680Pheon
    vr2_00_1     ,  //!< vr2_00_1  The reverse reaction of The rate of reduction of QAQB by P680pPheon
    vr2_01_1     ,  //!< vr2_01_1  The reverse reaction of The rate of reduction of QAQBn by P680pPheon
    vr2_02_1     ,  //!< vr2_02_1  The reverse reaction of The rate of reduction of QAQB2n by P680pPheon
    vr2_1        ,
    vr2_00_2     ,  //!< vr2_00_2  The reverse reaction of The rate of reduction of QAQB by P680Pheon
    vr2_01_2     ,  //!< vr2_01_2  The reverse reaction of The rate of reduction of QAQBn by P680Pheon
    vr2_02_2     ,  //!< vr2_02_2  The reverse reaction of The rate of reduction of QAQB2n by P680Pheon
    vr2_2        ,
    vP680qU      ,
    vP680qA      ,
    vU_P680      ,
    vP680_d      ,
    vP680_f      ,
    MAX          ,
};
template<>
struct enum_helper<MODULE_FI, PARAM_TYPE_VEL> {
  typedef ENUM_FI_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type : int {
    NONE         ,
    vA_d         ,  //!< vA_d  The rate of heat dissipation from peripheral antenna
    vA_f         ,  //!< vA_f  The rate of fluorescence emission from peripheral antenna
    vA_U         ,  //!< vA_U  The rate of exciton transfer from peripheral antenna to core antenna in open reaction center
    vU_A         ,  //!< vU_A  The rate of exciton transfer from core antenna to perpheral antenna in open center
    vU_f         ,  //!< vU_f  The rate of fluorescence emission from core antenna
    vU_d         ,  //!< vU_d  The rate of heat dissipation from core antenna
    v1           ,  //!< v1  The rate of primary charge separation
    v_r1         ,  //!< v_r1  The rate of charge recombination
    vS1_S2       ,  //!< vS1_S2  The rate of transition from S1 to S2
    vS2_S3       ,  //!< vS2_S3  The rate of transition from S2 to S3
    vS3_S0       ,  //!< vS3_S0  The rate of transition from S3 to S0
    vS0_S1       ,  //!< vS0_S1  The rate of transition from S0 to S1
    vz_1         ,  //!< vz_1  The rate of P680p reduction
    v1z_1        ,  //!< v1z_1  The rate of oxidation of S1T by P680pPheon
    v2z_1        ,  //!< v2z_1  The rate of oxidation of S2T  by P680pPheon
    v3z_1        ,  //!< v3z_1  The rate of oxidation of S3T  by P680pPheon
    v0z_1        ,  //!< v0z_1  The rate of oxidation of S0T  by P680pPheon
    vz_2         ,  //!< vz_2  The rate of P680pPheon reduction
    v1z_2        ,  //!< v1z_2  The rate of oxidation of S1T by P680pPheo
    v2z_2        ,  //!< v2z_2  The rate of oxidation of S2T  by P680pPheo
    v3z_2        ,  //!< v3z_2  The rate of oxidation of S3T  by P680pPheo
    v0z_2        ,  //!< v0z_2  The rate of oxidation of S0T  by P680pPheo
    v1z          ,
    v2z          ,
    v3z          ,
    v0z          ,
    vAB1         ,  //!< vAB1  The rate of electron transfer from QA- to QB
    vBA1         ,  //!< vBA1  The rate of electron transfer from QB- to QA
    vAB2         ,  //!< vAB2  The rate of electron transfer from QA- to QB-
    vBA2         ,  //!< vBA2  The rate of electron transfer from QB2- TO QA
    v3           ,  //!< v3  The rate of exchange of QAQBH2 with PQ
    v_r3         ,  //!< v_r3  The rate of exchange of QAQB with PQH2
    v3_n         ,  //!< v3_n  The rate of exchange of QAnQBH2 with PQ
    v_r3_n       ,  //!< v_r3_n  The rate of exchange of QAnQB with PQH2
    v_pq_ox      ,  //!< v_pq_ox  The rate of PQH2 oxidation
    Ic           ,  //!< Ic  The incident light on the core antenna
    Ia           ,  //!< Ia  The incident light on the peripheral antenna
    v2_1         ,  //!< v2_1  The rate of P680pPheon oxidation
    v2_2         ,  //!< v2_1  The rate of P680pPheon oxidation
    v2_00_1      ,  //!< v2_00_1  The rate of reduction of QAQB by P680pPheon
    v2_01_1      ,  //!< v2_01_1  The rate of reduction of QAQBn by P680pPheon
    v2_02_1      ,  //!< v2_02_1  The rate of reduction of QAQB2n by P680pPheon
    v2_00_2      ,  //!< v2_00_2  The rate of reduction of QAQB by P680Pheon
    v2_01_2      ,  //!< v2_01_2  The rate of reduction of QAQBn by P680Pheon
    v2_02_2      ,  //!< v2_02_2  The rate of reduction of QAQB2n by P680Pheon
    vr2_00_1     ,  //!< vr2_00_1  The reverse reaction of The rate of reduction of QAQB by P680pPheon
    vr2_01_1     ,  //!< vr2_01_1  The reverse reaction of The rate of reduction of QAQBn by P680pPheon
    vr2_02_1     ,  //!< vr2_02_1  The reverse reaction of The rate of reduction of QAQB2n by P680pPheon
    vr2_1        ,
    vr2_00_2     ,  //!< vr2_00_2  The reverse reaction of The rate of reduction of QAQB by P680Pheon
    vr2_01_2     ,  //!< vr2_01_2  The reverse reaction of The rate of reduction of QAQBn by P680Pheon
    vr2_02_2     ,  //!< vr2_02_2  The reverse reaction of The rate of reduction of QAQB2n by P680Pheon
    vr2_2        ,
    vP680qU      ,
    vP680qA      ,
    vU_P680      ,
    vP680_d      ,
    vP680_f      ,
    MAX          ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_FIVel		\
    NONE         ,		\
    vA_d         ,		\
    vA_f         ,		\
    vA_U         ,		\
    vU_A         ,		\
    vU_f         ,		\
    vU_d         ,		\
    v1           ,		\
    v_r1         ,		\
    vS1_S2       ,		\
    vS2_S3       ,		\
    vS3_S0       ,		\
    vS0_S1       ,		\
    vz_1         ,		\
    v1z_1        ,		\
    v2z_1        ,		\
    v3z_1        ,		\
    v0z_1        ,		\
    vz_2         ,		\
    v1z_2        ,		\
    v2z_2        ,		\
    v3z_2        ,		\
    v0z_2        ,		\
    v1z          ,		\
    v2z          ,		\
    v3z          ,		\
    v0z          ,		\
    vAB1         ,		\
    vBA1         ,		\
    vAB2         ,		\
    vBA2         ,		\
    v3           ,		\
    v_r3         ,		\
    v3_n         ,		\
    v_r3_n       ,		\
    v_pq_ox      ,		\
    Ic           ,		\
    Ia           ,		\
    v2_1         ,		\
    v2_2         ,		\
    v2_00_1      ,		\
    v2_01_1      ,		\
    v2_02_1      ,		\
    v2_00_2      ,		\
    v2_01_2      ,		\
    v2_02_2      ,		\
    vr2_00_1     ,		\
    vr2_01_1     ,		\
    vr2_02_1     ,		\
    vr2_1        ,		\
    vr2_00_2     ,		\
    vr2_01_2     ,		\
    vr2_02_2     ,		\
    vr2_2        ,		\
    vP680qU      ,		\
    vP680qA      ,		\
    vU_P680      ,		\
    vP680_d      ,		\
    vP680_f      ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_FI, PARAM_TYPE_VEL> FI;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_PR_VEL : int {
    NONE      ,
    v111      ,
    v112      ,
    v113      ,
    v121      ,
    v122      ,
    v123      ,
    v124      ,
    v131      ,
    v1in      ,
    v2out     ,
    MAX       ,
};
template<>
struct enum_helper<MODULE_PR, PARAM_TYPE_VEL> {
  typedef ENUM_PR_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type : int {
    NONE      ,
    v111      ,
    v112      ,
    v113      ,
    v121      ,
    v122      ,
    v123      ,
    v124      ,
    v131      ,
    v1in      ,
    v2out     ,
    MAX       ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_PRVel		\
    NONE      ,		\
    v111      ,		\
    v112      ,		\
    v113      ,		\
    v121      ,		\
    v122      ,		\
    v123      ,		\
    v124      ,		\
    v131      ,		\
    v1in      ,		\
    v2out     ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_PR, PARAM_TYPE_VEL> PR;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_PS_VEL : int {
    NONE     ,
    v1       ,
    v2       ,
    v3       ,
    v4       ,
    v5       ,
    v6       ,
    v7       ,
    v8       ,
    v9       ,
    v10      ,
    v13      ,
    v16      ,
    v23      ,
    v31      ,
    v32      ,
    v33      ,
    Pi       ,
    v24      ,
    v25      ,
    MAX      ,
};
template<>
struct enum_helper<MODULE_PS, PARAM_TYPE_VEL> {
  typedef ENUM_PS_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type : int {
    NONE     ,
    v1       ,
    v2       ,
    v3       ,
    v4       ,
    v5       ,
    v6       ,
    v7       ,
    v8       ,
    v9       ,
    v10      ,
    v13      ,
    v16      ,
    v23      ,
    v31      ,
    v32      ,
    v33      ,
    Pi       ,
    v24      ,
    v25      ,
    MAX      ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_PSVel		\
    NONE     ,		\
    v1       ,		\
    v2       ,		\
    v3       ,		\
    v4       ,		\
    v5       ,		\
    v6       ,		\
    v7       ,		\
    v8       ,		\
    v9       ,		\
    v10      ,		\
    v13      ,		\
    v16      ,		\
    v23      ,		\
    v31      ,		\
    v32      ,		\
    v33      ,		\
    Pi       ,		\
    v24      ,		\
    v25      ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_PS, PARAM_TYPE_VEL> PS;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_RROEA_VEL : int {
    NONE            ,
    ve2GAPDH        ,
    ve2FBPase       ,
    ve2SBPase       ,
    ve2PRK          ,
    ve2ATPase       ,
    ve2ATPGPP       ,
    ve2MDH          ,
    ve2Fd           ,
    veFd2Thio       ,
    veFd2Calvin     ,
    ve2RuACT        ,
    MAX             ,
};
template<>
struct enum_helper<MODULE_RROEA, PARAM_TYPE_VEL> {
  typedef ENUM_RROEA_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type : int {
    NONE            ,
    ve2GAPDH        ,
    ve2FBPase       ,
    ve2SBPase       ,
    ve2PRK          ,
    ve2ATPase       ,
    ve2ATPGPP       ,
    ve2MDH          ,
    ve2Fd           ,
    veFd2Thio       ,
    veFd2Calvin     ,
    ve2RuACT        ,
    MAX             ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_RROEAVel		\
    NONE            ,		\
    ve2GAPDH        ,		\
    ve2FBPase       ,		\
    ve2SBPase       ,		\
    ve2PRK          ,		\
    ve2ATPase       ,		\
    ve2ATPGPP       ,		\
    ve2MDH          ,		\
    ve2Fd           ,		\
    veFd2Thio       ,		\
    veFd2Calvin     ,		\
    ve2RuACT        ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_RROEA, PARAM_TYPE_VEL> RROEA;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_RedoxReg_VEL : int {
    NONE     ,
    Vred     ,
    Vox      ,
    MAX      ,
};
template<>
struct enum_helper<MODULE_RedoxReg, PARAM_TYPE_VEL> {
  typedef ENUM_RedoxReg_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type : int {
    NONE     ,
    Vred     ,
    Vox      ,
    MAX      ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_RedoxRegVel		\
    NONE     ,		\
    Vred     ,		\
    Vox      ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_VEL> RedoxReg;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_RuACT_VEL : int {
    NONE     ,
    v1       ,
    vn1      ,
    v7       ,
    vn7      ,
    v6_1     ,
    v6_2     ,
    MAX      ,
};
template<>
struct enum_helper<MODULE_RuACT, PARAM_TYPE_VEL> {
  typedef ENUM_RuACT_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type : int {
    NONE     ,
    v1       ,
    vn1      ,
    v7       ,
    vn7      ,
    v6_1     ,
    v6_2     ,
    MAX      ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_RuACTVel		\
    NONE     ,		\
    v1       ,		\
    vn1      ,		\
    v7       ,		\
    vn7      ,		\
    v6_1     ,		\
    v6_2     ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_RuACT, PARAM_TYPE_VEL> RuACT;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_SUCS_VEL : int {
    NONE         ,
    v51          ,  //!< DHAP+GAP --FBP
    v52          ,  //!< FBP --F6P + Pi
    v55          ,  //!< G1P+UTP --OPOP+UDPG
    v56          ,  //!< UDPG+F6P--SUCP + UDP
    v57          ,  //!< SUCP--Pi + SUC
    v58          ,  //!< F26BP--F6P + Pi
    v59          ,  //!< F6P + ATP --ADP + F26BP
    v60          ,  //!< ATP+UDP --UTP + ADP
    v61          ,  //!< POPO --2PO
    v62          ,  //!< SUC SINK
    vdhap_in     ,  //!< DHAP IN
    vgap_in      ,  //!< GAP Export from chloroplast
    vpga_in      ,  //!< PGA export from chloroplast
    vpga_use     ,  //!< PGA utilisation in chloroplast
    vatpf        ,  //!< ATP synthesis rate
    MAX          ,
};
template<>
struct enum_helper<MODULE_SUCS, PARAM_TYPE_VEL> {
  typedef ENUM_SUCS_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type : int {
    NONE         ,
    v51          ,  //!< DHAP+GAP --FBP
    v52          ,  //!< FBP --F6P + Pi
    v55          ,  //!< G1P+UTP --OPOP+UDPG
    v56          ,  //!< UDPG+F6P--SUCP + UDP
    v57          ,  //!< SUCP--Pi + SUC
    v58          ,  //!< F26BP--F6P + Pi
    v59          ,  //!< F6P + ATP --ADP + F26BP
    v60          ,  //!< ATP+UDP --UTP + ADP
    v61          ,  //!< POPO --2PO
    v62          ,  //!< SUC SINK
    vdhap_in     ,  //!< DHAP IN
    vgap_in      ,  //!< GAP Export from chloroplast
    vpga_in      ,  //!< PGA export from chloroplast
    vpga_use     ,  //!< PGA utilisation in chloroplast
    vatpf        ,  //!< ATP synthesis rate
    MAX          ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_SUCSVel		\
    NONE         ,		\
    v51          ,		\
    v52          ,		\
    v55          ,		\
    v56          ,		\
    v57          ,		\
    v58          ,		\
    v59          ,		\
    v60          ,		\
    v61          ,		\
    v62          ,		\
    vdhap_in     ,		\
    vgap_in      ,		\
    vpga_in      ,		\
    vpga_use     ,		\
    vatpf        ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_SUCS, PARAM_TYPE_VEL> SUCS;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_XanCycle_VEL : int {
    NONE       ,
    Vva        ,  //!< The velocity of v to a conversion
    Vaz        ,  //!< The rate of A to z
    Vza        ,  //!< THe rate of z to a
    Vav        ,  //!< The rate of A to V
    Vvf        ,  //!< The rate of V formation
    Vv2ABA     ,  //!< The rate of conversion from v to ABA.
    VABAdg     ,  //!< The rate of ABA degradation
    MAX        ,
};
template<>
struct enum_helper<MODULE_XanCycle, PARAM_TYPE_VEL> {
  typedef ENUM_XanCycle_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type : int {
    NONE       ,
    Vva        ,  //!< The velocity of v to a conversion
    Vaz        ,  //!< The rate of A to z
    Vza        ,  //!< THe rate of z to a
    Vav        ,  //!< The rate of A to V
    Vvf        ,  //!< The rate of V formation
    Vv2ABA     ,  //!< The rate of conversion from v to ABA.
    VABAdg     ,  //!< The rate of ABA degradation
    MAX        ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_XanCycleVel		\
    NONE       ,		\
    Vva        ,		\
    Vaz        ,		\
    Vza        ,		\
    Vav        ,		\
    Vvf        ,		\
    Vv2ABA     ,		\
    VABAdg     ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_VEL> XanCycle;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_NONE_VEL : int {
    NONE   ,
    MAX    ,
};
template<>
struct enum_helper<MODULE_NONE, PARAM_TYPE_VEL> {
  typedef ENUM_NONE_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type : int {
    NONE   ,
    MAX    ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_NONEVel		\
    NONE   ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_NONE, PARAM_TYPE_VEL> NONE;
}

#ifdef EPHOTO_USE_SCOPED_ENUM
enum class ENUM_MAX_VEL : int {
    NONE   ,
    MAX    ,
};
template<>
struct enum_helper<MODULE_MAX, PARAM_TYPE_VEL> {
  typedef ENUM_MAX_VEL type;
};
#else // EPHOTO_USE_SCOPED_ENUM
template<>
enum ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type : int {
    NONE   ,
    MAX    ,
};
#endif // EPHOTO_USE_SCOPED_ENUM
#define MEMBERS_MAXVel		\
    NONE   ,		\
    MAX
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::all;
template<> const std::map<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::names;
template<> const std::map<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type, double> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::defaults_C3;
template<> const std::map<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type, std::string> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::glymaids;
template<> const std::map<std::string, typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::aliases;
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::constant;
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::nonvector;
template<> std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::skipped;
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::resetone;
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL>::initonce;

namespace VEL {
  typedef ValueSetEnum<MODULE_MAX, PARAM_TYPE_VEL> MAX;
}

