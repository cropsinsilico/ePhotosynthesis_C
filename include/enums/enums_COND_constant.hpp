// This code is generated by generate_enum.py and should not be
// modified directly
#pragma once

template<>
inline const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_CM, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_DynaPS, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_EPS, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_FIBF, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_PS_PR, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_RA, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::constant;
}
template<>
inline const std::vector<typename ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type>& get_enum_constant<typename ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::Type>() {
  return ValueSetEnum<MODULE_trDynaPS, PARAM_TYPE_COND>::constant;
}
