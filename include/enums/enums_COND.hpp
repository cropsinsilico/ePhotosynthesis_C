// This code is generated by generate_enum.py and should not be
// modified directly
#pragma once

template<>
enum ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type : int {
    NONE        ,
    ISPHr       ,  //!< The reduced ion sulfer protein (ISPH); unit: micromole per m2
    cytc1       ,  //!< The oxidized state of cytc1; unit: micromole per meter square
    ISPo        ,  //!< The oxidized ion sulfer protein (ISP); unit: micromole per meter square
    ISPoQH2     ,  //!< The complex of oxidized ion sulfer protein and reduced quinone; unit: micromole per meter square
    QHsemi      ,  //!< Semiquinone; micromole per meter square
    cytbL       ,  //!< The oxidized cytbL; micromole per meter square
    Qi          ,  //!< The binding Quinone; micromole per meter square
    Q           ,  //!< Quinone; micromole per meter square
    cytbH       ,  //!< The oxidized form of cytbH; micromole per meter square
    Qn          ,  //!< Q-; unit: micromole per meter square
    Qr          ,  //!< The reduced quinone Q2-; micromole per meter square
    QH2         ,  //!< The reduced quinone PQH2; micromole per meter square
    cytc2       ,  //!< oxidized cytc2; micromole per meter square
    P700        ,  //!< The reduced state of P700, including both P700 and excited P700; micromole per meter square
    ADP         ,  //!< ADP in stroma, from the earlier photorespiration model; mmol l-1
    ATP         ,  //!< ATP in stroma, from the photorespiration model; mmol l-1
    Ks          ,  //!< K ions in stroma, mM, from the literature; mmol l-1; 90 might be an default;
    Mgs         ,  //!< Mg ions in stroma, mM, from the literature of the ion estimate
    Cls         ,  //!< Cl ions in stroma, mM, from the literature of the ion estimate
    Aip         ,  //!< The number of photons in peripheral antenna; micromole per meter square
    U           ,  //!< The number of photons in core antenna; micromole per meter square
    An          ,  //!< The reduced electron acceptor in PSI; micromole per meter square
    Fdn         ,  //!< The reduced ferrodoxin; micromole per meter square leaf area
    BFHs        ,  //!< The protonated buffer species  and free proton together in stroma; mmol l-1; The value follows Laisk and Walker, 1989. But they did not give reference about the source of this number.; default 25
    BFHl        ,  //!< The protonated buffer species and free proton together in lumen; mmol l-1; The value follows Laisk and Walker, 1989. But they did not give reference about the source of this number. ; default 5
    PHs         ,  //!< The PH value of the stroma
    PHl         ,  //!< The PH value of the lumen
    NADPH       ,  //!< The NADPH concentration in stroma, Unit: mmol l-1;
    MAX         ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_BF, PARAM_TYPE_COND> BF;
}

template<>
enum ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type : int {
    NONE           ,
    A              ,  //!< The concentration of excitons in the peripheral antenna
    U              ,  //!< The concentration fo excitons in the core antenna
    P680ePheo      ,  //!< The concentration of the P680Pheo; QF add
    P680pPheon     ,  //!< The concentration for the P680+ Pheo-
    P680pPheo      ,  //!< The concentration of P680+ Pheo
    P680Pheon      ,  //!< The concentration of P680Pheo-
    Yz             ,  //!< The concentration of reduced tyrosine; --unused
    S1T            ,  //!< The concentration of S1 in combination with reduced tyrosine
    S2T            ,  //!< The concentration of S2 in combination with reduced tyrosine
    S3T            ,  //!< The concentration of S3 in combination with reduced tyrosine
    S0T            ,  //!< The concentration of S0 in combination with reduced tyrosine
    S1Tp           ,  //!< The concentration of S1 in combination with oxidized tyrosine
    S2Tp           ,  //!< The concentration of S2 in combination with oxidized tyrosine
    S3Tp           ,  //!< The concentration of S3 in combination with oxidized tyrosine
    S0Tp           ,  //!< The concentration of S0 in combination with oxidized tyrosine
    QAQB           ,  //!< The concentration of [QAQB]
    QAnQB          ,  //!< The concentration of [QA-QB]
    QAQBn          ,  //!< The concentration of [QAQB-]
    QAnQBn         ,  //!< The concentration of [QA-QB-]
    QAQB2n         ,  //!< The concentration of [QAQB2-]
    QAnQB2n        ,  //!< The concentration of [QA-QB2-]
    PQn            ,  //!< The concentration of reduced PQ, i.e. PQH2;
    MAX            ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_FI, PARAM_TYPE_COND> FI;
}

template<>
enum ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type : int {
    NONE      ,
    GCEA      ,  //!< Glycerate in chloroplast; derived based on V113
    GCA       ,  //!< Derived from radioactive labelling experiment; assume equal concenatration inside and outshide chloroplast
    PGCA      ,  //!< Phosphoglycolate in chloroplast derived based on the Km112; orignal value is : 0.0029;
    GCAc      ,  //!< See the note for GCA.
    GOAc      ,  //!< Glyoxylate in cytosol; 0.028; EXPERIMENTAL DATA;
    SERc      ,  //!< Serine in cytosol; 7.5 original value
    GLYc      ,  //!< Glycine in cytosol; 1.8 original vlaue
    HPRc      ,  //!< HydroxylPyruvate; derived from equation 123;
    GCEAc     ,  //!< Glycerate in cytosol; assume at equilibrium with GCEA initially.
    RuBP      ,  //!< RuBP concentration
    _v131     ,  //!< [CONST] ?
    MAX       ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_PR, PARAM_TYPE_COND> PR;
}

template<>
enum ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type : int {
    NONE     ,
    RuBP     ,
    PGA      ,
    DPGA     ,
    T3P      ,
    ADPG     ,  //!< (0.0 with C3)
    FBP      ,
    E4P      ,
    S7P      ,
    SBP      ,
    ATP      ,
    HexP     ,
    PenP     ,
    _Pi      ,  //!< [CONST] ?
    _ADP     ,  //!< [CONST] ?
    _v1      ,  //!< [CONST] ?
    MAX      ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_PS, PARAM_TYPE_COND> PS;
}

template<>
enum ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type : int {
    NONE       ,
    GAPDH      ,  //!< [CALC] Calculated from Pool & Coeff The initial concentration of active GAPDH; *=V3; SA = 620.0, mw = 147000.0, PS::V3
    FBPase     ,  //!< [CALC] Calculated from Pool & Coeff The initial concentration of active FBPase; *=V6; SA = 119.0, mw = 195000.0, PS::V6
    SBPase     ,  //!< [CALC] Calculated from Pool & Coeff The initial concentration of active SBPase; *=V9; SA = 70.0, mw = 66000.0, PS::V9
    PRK        ,  //!< [CALC] Calculated from Pool & Coeff The initial concentration of active PRK; *=V13; SA = 410.0, mw = 40000.0 PS::V13
    ATPase     ,  //!< [CALC] Calculated from Pool & Coeff The initial concentration of active ATPase; *=V16; SA = 100.0, mw = 500000.0 PS::V16
    ATPGPP     ,  //!< [CALC] Calculated from Pool & Coeff The initial concentration of active ATPGPP; *=V23; SA = 10.0, mw = 210000.0 PS::V23
    MDH        ,  //!< The initial concentration of active MDH; Not set from Pool like previous variables
    Thio       ,  //!< The initial concentration of reduced thioredoxin; scaled by Coeff
    Fd         ,  //!< The initial concentration of reduced ferrodoxin; scaled by Coeff
    RuACT      ,  //!< The initial concentration of active Rubisco activase; scaled by Coeff
    Coeff      ,  //!< [CONST, NON_VECTOR] Used to scale Thio, Fd, & RuACT and calculate GAPDH, FBPase, SBPase, PRK, ATPase, ATPGPP from Pool values
    MAX        ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_RROEA, PARAM_TYPE_COND> RROEA;
}

template<>
enum ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type : int {
    NONE      ,
    Thion     ,  //!< This is a wild guess
    V6        ,  //!< [CALC, NON_VECTOR]
    V9        ,  //!< [CALC, NON_VECTOR]
    V13       ,  //!< [CALC, NON_VECTOR]
    V16       ,  //!< [CALC, NON_VECTOR]
    MAX       ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_COND> RedoxReg;
}

template<>
enum ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type : int {
    NONE     ,
    ER       ,  //!< The concentration of inactive ER
    Eaf      ,  //!< The total concentration of E, EC, AND ECM
    ECMR     ,  //!< The concentration of ECMR
    RuBP     ,  //!< The concentration of ECMR
    MAX      ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_RuACT, PARAM_TYPE_COND> RuACT;
}

template<>
enum ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type : int {
    NONE       ,
    T3Pc       ,
    FBPc       ,
    HexPc      ,
    F26BPc     ,
    UDPGc      ,
    SUCP       ,
    SUC        ,
    PGAc       ,
    MAX        ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_SUCS, PARAM_TYPE_COND> SUCS;
}

template<>
enum ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type : int {
    NONE     ,
    Vx       ,  //!< * 0.37; The concentration of Violozanthin
    Ax       ,  //!< * 0.37; The concentration of Anthrozanthin
    Zx       ,  //!< * 0.37; The concentration of Zeaznthin
    ABA      ,  //!< The concentration of ABA
    MAX      ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_COND> XanCycle;
}

template<>
enum ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type : int {
    NONE   ,
    MAX    ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_NONE, PARAM_TYPE_COND> NONE;
}

template<>
enum ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type : int {
    NONE   ,
    MAX    ,
};
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::all;
template<> const std::map<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type, std::string> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::names;
template<> const std::map<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::defaults;
template<> const std::map<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type, double> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::defaults_C3;
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::constants;
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::calculated;
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::nonvector;
template<> const std::vector<typename ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::Type> ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND>::skipped;

namespace COND {
  typedef ValueSetEnum<MODULE_MAX, PARAM_TYPE_COND> MAX;
}

