// This code is generated by generate_enum.py and should not be
// modified directly
#pragma once

#include "enums/enums_helpers.hpp"

namespace ePhotosynthesis {
  #ifdef EPHOTO_USE_SCOPED_ENUM
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Key to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const ENUM_BF_POOL& x) {
    out << ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::getName(x);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  template<typename T>
  std::ostream& operator<<(std::ostream& out, const std::map<ENUM_BF_POOL, T>& x) {
    ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::print_map(x, out);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const std::vector<ENUM_BF_POOL>& x) {
    ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::print_vector(x, out);
    return out;
  }
  #else // EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::Type : int {
    MEMBERS_BFPool
  };
  #endif // EPHOTO_USE_SCOPED_ENUM
  template<> const std::vector<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::all;
  template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::names;
  template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::defaults;
  template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::defaults_C3;
  template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::glymaids;
  template<> const std::map<std::string, typename ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::aliases;
  template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::docs;
  template<> std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::value_flags;
  template<> const std::map<typename ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL>::static_value_flags;
  
  namespace POOL {
    typedef ValueSetEnum<MODULE_BF, PARAM_TYPE_POOL> BF;
  }
  
  #ifdef EPHOTO_USE_SCOPED_ENUM
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Key to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const ENUM_FIBF_POOL& x) {
    out << ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::getName(x);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  template<typename T>
  std::ostream& operator<<(std::ostream& out, const std::map<ENUM_FIBF_POOL, T>& x) {
    ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::print_map(x, out);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const std::vector<ENUM_FIBF_POOL>& x) {
    ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::print_vector(x, out);
    return out;
  }
  #else // EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::Type : int {
    MEMBERS_FIBFPool
  };
  #endif // EPHOTO_USE_SCOPED_ENUM
  template<> const std::vector<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::all;
  template<> const std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::names;
  template<> const std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::defaults;
  template<> const std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::defaults_C3;
  template<> const std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::glymaids;
  template<> const std::map<std::string, typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::aliases;
  template<> const std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::docs;
  template<> std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::value_flags;
  template<> const std::map<typename ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL>::static_value_flags;
  
  namespace POOL {
    typedef ValueSetEnum<MODULE_FIBF, PARAM_TYPE_POOL> FIBF;
  }
  
  #ifdef EPHOTO_USE_SCOPED_ENUM
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Key to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const ENUM_FI_POOL& x) {
    out << ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::getName(x);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  template<typename T>
  std::ostream& operator<<(std::ostream& out, const std::map<ENUM_FI_POOL, T>& x) {
    ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::print_map(x, out);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const std::vector<ENUM_FI_POOL>& x) {
    ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::print_vector(x, out);
    return out;
  }
  #else // EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::Type : int {
    MEMBERS_FIPool
  };
  #endif // EPHOTO_USE_SCOPED_ENUM
  template<> const std::vector<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::all;
  template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::names;
  template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::defaults;
  template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::defaults_C3;
  template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::glymaids;
  template<> const std::map<std::string, typename ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::aliases;
  template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::docs;
  template<> std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::value_flags;
  template<> const std::map<typename ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL>::static_value_flags;
  
  namespace POOL {
    typedef ValueSetEnum<MODULE_FI, PARAM_TYPE_POOL> FI;
  }
  
  #ifdef EPHOTO_USE_SCOPED_ENUM
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Key to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const ENUM_PR_POOL& x) {
    out << ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::getName(x);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  template<typename T>
  std::ostream& operator<<(std::ostream& out, const std::map<ENUM_PR_POOL, T>& x) {
    ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::print_map(x, out);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const std::vector<ENUM_PR_POOL>& x) {
    ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::print_vector(x, out);
    return out;
  }
  #else // EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::Type : int {
    MEMBERS_PRPool
  };
  #endif // EPHOTO_USE_SCOPED_ENUM
  template<> const std::vector<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::all;
  template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::names;
  template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::defaults;
  template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::defaults_C3;
  template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::glymaids;
  template<> const std::map<std::string, typename ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::aliases;
  template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::docs;
  template<> std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::value_flags;
  template<> const std::map<typename ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL>::static_value_flags;
  
  namespace POOL {
    typedef ValueSetEnum<MODULE_PR, PARAM_TYPE_POOL> PR;
  }
  
  #ifdef EPHOTO_USE_SCOPED_ENUM
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Key to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const ENUM_PS_POOL& x) {
    out << ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::getName(x);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  template<typename T>
  std::ostream& operator<<(std::ostream& out, const std::map<ENUM_PS_POOL, T>& x) {
    ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::print_map(x, out);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const std::vector<ENUM_PS_POOL>& x) {
    ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::print_vector(x, out);
    return out;
  }
  #else // EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::Type : int {
    MEMBERS_PSPool
  };
  #endif // EPHOTO_USE_SCOPED_ENUM
  template<> const std::vector<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::all;
  template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::names;
  template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::defaults;
  template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::defaults_C3;
  template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::glymaids;
  template<> const std::map<std::string, typename ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::aliases;
  template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::docs;
  template<> std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::value_flags;
  template<> const std::map<typename ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL>::static_value_flags;
  
  namespace POOL {
    typedef ValueSetEnum<MODULE_PS, PARAM_TYPE_POOL> PS;
  }
  
  #ifdef EPHOTO_USE_SCOPED_ENUM
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Key to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const ENUM_RROEA_POOL& x) {
    out << ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::getName(x);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  template<typename T>
  std::ostream& operator<<(std::ostream& out, const std::map<ENUM_RROEA_POOL, T>& x) {
    ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::print_map(x, out);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const std::vector<ENUM_RROEA_POOL>& x) {
    ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::print_vector(x, out);
    return out;
  }
  #else // EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::Type : int {
    MEMBERS_RROEAPool
  };
  #endif // EPHOTO_USE_SCOPED_ENUM
  template<> const std::vector<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::all;
  template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::names;
  template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::defaults;
  template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::defaults_C3;
  template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::glymaids;
  template<> const std::map<std::string, typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::aliases;
  template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::docs;
  template<> std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::value_flags;
  template<> const std::map<typename ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL>::static_value_flags;
  
  namespace POOL {
    typedef ValueSetEnum<MODULE_RROEA, PARAM_TYPE_POOL> RROEA;
  }
  
  #ifdef EPHOTO_USE_SCOPED_ENUM
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Key to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const ENUM_RedoxReg_POOL& x) {
    out << ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::getName(x);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  template<typename T>
  std::ostream& operator<<(std::ostream& out, const std::map<ENUM_RedoxReg_POOL, T>& x) {
    ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::print_map(x, out);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const std::vector<ENUM_RedoxReg_POOL>& x) {
    ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::print_vector(x, out);
    return out;
  }
  #else // EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::Type : int {
    MEMBERS_RedoxRegPool
  };
  #endif // EPHOTO_USE_SCOPED_ENUM
  template<> const std::vector<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::all;
  template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::names;
  template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::defaults;
  template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::defaults_C3;
  template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::glymaids;
  template<> const std::map<std::string, typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::aliases;
  template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::docs;
  template<> std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::value_flags;
  template<> const std::map<typename ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL>::static_value_flags;
  
  namespace POOL {
    typedef ValueSetEnum<MODULE_RedoxReg, PARAM_TYPE_POOL> RedoxReg;
  }
  
  #ifdef EPHOTO_USE_SCOPED_ENUM
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Key to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const ENUM_RuACT_POOL& x) {
    out << ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::getName(x);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  template<typename T>
  std::ostream& operator<<(std::ostream& out, const std::map<ENUM_RuACT_POOL, T>& x) {
    ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::print_map(x, out);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const std::vector<ENUM_RuACT_POOL>& x) {
    ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::print_vector(x, out);
    return out;
  }
  #else // EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::Type : int {
    MEMBERS_RuACTPool
  };
  #endif // EPHOTO_USE_SCOPED_ENUM
  template<> const std::vector<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::all;
  template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::names;
  template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::defaults;
  template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::defaults_C3;
  template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::glymaids;
  template<> const std::map<std::string, typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::aliases;
  template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::docs;
  template<> std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::value_flags;
  template<> const std::map<typename ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL>::static_value_flags;
  
  namespace POOL {
    typedef ValueSetEnum<MODULE_RuACT, PARAM_TYPE_POOL> RuACT;
  }
  
  #ifdef EPHOTO_USE_SCOPED_ENUM
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Key to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const ENUM_SUCS_POOL& x) {
    out << ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::getName(x);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  template<typename T>
  std::ostream& operator<<(std::ostream& out, const std::map<ENUM_SUCS_POOL, T>& x) {
    ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::print_map(x, out);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const std::vector<ENUM_SUCS_POOL>& x) {
    ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::print_vector(x, out);
    return out;
  }
  #else // EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::Type : int {
    MEMBERS_SUCSPool
  };
  #endif // EPHOTO_USE_SCOPED_ENUM
  template<> const std::vector<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::all;
  template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::names;
  template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::defaults;
  template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::defaults_C3;
  template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::glymaids;
  template<> const std::map<std::string, typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::aliases;
  template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::docs;
  template<> std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::value_flags;
  template<> const std::map<typename ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL>::static_value_flags;
  
  namespace POOL {
    typedef ValueSetEnum<MODULE_SUCS, PARAM_TYPE_POOL> SUCS;
  }
  
  #ifdef EPHOTO_USE_SCOPED_ENUM
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Key to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const ENUM_XanCycle_POOL& x) {
    out << ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::getName(x);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  template<typename T>
  std::ostream& operator<<(std::ostream& out, const std::map<ENUM_XanCycle_POOL, T>& x) {
    ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::print_map(x, out);
    return out;
  }
  /**
    Serialize an enum to an output stream
    \param[in,out] out Output stream
    \param[in] x Collection to serialize
    \return Updated stream
  */
  inline std::ostream& operator<<(std::ostream& out, const std::vector<ENUM_XanCycle_POOL>& x) {
    ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::print_vector(x, out);
    return out;
  }
  #else // EPHOTO_USE_SCOPED_ENUM
  template<>
  enum ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::Type : int {
    MEMBERS_XanCyclePool
  };
  #endif // EPHOTO_USE_SCOPED_ENUM
  template<> const std::vector<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::all;
  template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::names;
  template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::defaults;
  template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::Type, double> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::defaults_C3;
  template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::glymaids;
  template<> const std::map<std::string, typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::Type> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::aliases;
  template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::Type, std::string> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::docs;
  template<> std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::value_flags;
  template<> const std::map<typename ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::Type, int> ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL>::static_value_flags;
  
  namespace POOL {
    typedef ValueSetEnum<MODULE_XanCycle, PARAM_TYPE_POOL> XanCycle;
  }
  
}
