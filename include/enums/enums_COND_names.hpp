// This code is generated by generate_enum.py and should not be
// modified directly
#pragma once

#include <map>
#include <string>
#include "enums/enums_utils.hpp"


const std::map<const BF_COND, const std::string>& BF_COND_names();
template<> const std::map<const BF_COND, const std::string>& get_enum_names<enum BF_COND>() {
  return BF_COND_names();
};

template<> MODULE get_enum_module<enum BF_COND>() {
  return MODULE_BF;
}

const std::map<const FI_COND, const std::string>& FI_COND_names();
template<> const std::map<const FI_COND, const std::string>& get_enum_names<enum FI_COND>() {
  return FI_COND_names();
};

template<> MODULE get_enum_module<enum FI_COND>() {
  return MODULE_FI;
}

const std::map<const PR_COND, const std::string>& PR_COND_names();
template<> const std::map<const PR_COND, const std::string>& get_enum_names<enum PR_COND>() {
  return PR_COND_names();
};

template<> MODULE get_enum_module<enum PR_COND>() {
  return MODULE_PR;
}

const std::map<const PS_COND, const std::string>& PS_COND_names();
template<> const std::map<const PS_COND, const std::string>& get_enum_names<enum PS_COND>() {
  return PS_COND_names();
};

template<> MODULE get_enum_module<enum PS_COND>() {
  return MODULE_PS;
}

const std::map<const RROEA_COND, const std::string>& RROEA_COND_names();
template<> const std::map<const RROEA_COND, const std::string>& get_enum_names<enum RROEA_COND>() {
  return RROEA_COND_names();
};

template<> MODULE get_enum_module<enum RROEA_COND>() {
  return MODULE_RROEA;
}

const std::map<const RedoxReg_COND, const std::string>& RedoxReg_COND_names();
template<> const std::map<const RedoxReg_COND, const std::string>& get_enum_names<enum RedoxReg_COND>() {
  return RedoxReg_COND_names();
};

template<> MODULE get_enum_module<enum RedoxReg_COND>() {
  return MODULE_RedoxReg;
}

const std::map<const RuACT_COND, const std::string>& RuACT_COND_names();
template<> const std::map<const RuACT_COND, const std::string>& get_enum_names<enum RuACT_COND>() {
  return RuACT_COND_names();
};

template<> MODULE get_enum_module<enum RuACT_COND>() {
  return MODULE_RuACT;
}

const std::map<const SUCS_COND, const std::string>& SUCS_COND_names();
template<> const std::map<const SUCS_COND, const std::string>& get_enum_names<enum SUCS_COND>() {
  return SUCS_COND_names();
};

template<> MODULE get_enum_module<enum SUCS_COND>() {
  return MODULE_SUCS;
}

const std::map<const XanCycle_COND, const std::string>& XanCycle_COND_names();
template<> const std::map<const XanCycle_COND, const std::string>& get_enum_names<enum XanCycle_COND>() {
  return XanCycle_COND_names();
};

template<> MODULE get_enum_module<enum XanCycle_COND>() {
  return MODULE_XanCycle;
}

